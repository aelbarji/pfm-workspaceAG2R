
/**
 * CUS_HPD_InterfaceQuery_WSServiceStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.2  Built on : Apr 17, 2012 (05:33:49 IST)
 */
        package pilotage.client;

        

        /*
        *  CUS_HPD_InterfaceQuery_WSServiceStub java implementation
        */

        
        public class CUS_HPD_InterfaceQuery_WSServiceStub extends org.apache.axis2.client.Stub
        {
        protected org.apache.axis2.description.AxisOperation[] _operations;

        //hashmaps to keep the fault mapping
        private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
        private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
        private java.util.HashMap faultMessageMap = new java.util.HashMap();

        private static int counter = 0;

        private static synchronized java.lang.String getUniqueSuffix(){
            // reset the counter if it is greater than 99999
            if (counter > 99999){
                counter = 0;
            }
            counter = counter + 1; 
            return java.lang.Long.toString(java.lang.System.currentTimeMillis()) + "_" + counter;
        }

    
    private void populateAxisService() throws org.apache.axis2.AxisFault {

     //creating the Service with a unique name
     _service = new org.apache.axis2.description.AxisService("CUS_HPD_InterfaceQuery_WSService" + getUniqueSuffix());
     addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[4];
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_QueryList_Full_Service"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[0]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_Query_Full_Service"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[1]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_QueryList_Light_Service"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[2]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_Query_Light_Service"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[3]=__operation;
            
        
        }

    //populates the faults
    private void populateFaults(){
         


    }

    /**
      *Constructor that takes in a configContext
      */

    public CUS_HPD_InterfaceQuery_WSServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
       java.lang.String targetEndpoint)
       throws org.apache.axis2.AxisFault {
         this(configurationContext,targetEndpoint,false);
   }


   /**
     * Constructor that takes in a configContext  and useseperate listner
     */
   public CUS_HPD_InterfaceQuery_WSServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
         //To populate AxisService
         populateAxisService();
         populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);
        
	
        _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
        
    
    }

    /**
     * Default Constructor
     */
    public CUS_HPD_InterfaceQuery_WSServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {
        
                    this(configurationContext,"http://itsm-mt-pp/arsys/services/ARService?server=itsm-ars-pp.windows.appli&webService=CUS_HPD_Interface-Query_WS" );
                
    }

    /**
     * Default Constructor
     */
    public CUS_HPD_InterfaceQuery_WSServiceStub() throws org.apache.axis2.AxisFault {
        
                    this("http://itsm-mt-pp/arsys/services/ARService?server=itsm-ars-pp.windows.appli&webService=CUS_HPD_Interface-Query_WS" );
                
    }

    /**
     * Constructor taking the target endpoint
     */
    public CUS_HPD_InterfaceQuery_WSServiceStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(null,targetEndpoint);
    }



        
                    /**
                     * Auto generated method signature
                     * 
                     * @see pilotage.client.CUS_HPD_InterfaceQuery_WSService#incident_QueryList_Full_Service
                     * @param incident_QueryList_Full_Service3
                    
                     * @param authenticationInfo4
                    
                     */

                    

                            public  pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_ServiceResponse incident_QueryList_Full_Service(

                            pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_Service incident_QueryList_Full_Service3,pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE authenticationInfo4)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
              _operationClient.getOptions().setAction("urn:CUS_HPD_Interface-Query_WS/Incident_QueryList_Full_Service");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    incident_QueryList_Full_Service3,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_QueryList_Full_Service")), new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_QueryList_Full_Service"));
                                                
                                               env.build();
                                    
                                        // add the children only if the parameter is not null
                                        if (authenticationInfo4!=null){
                                            
                                                    org.apache.axiom.om.OMElement omElementauthenticationInfo4 = toOM(authenticationInfo4, optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_QueryList_Full_Service")));
                                                    addHeader(omElementauthenticationInfo4,env);
                                                
                                        }
                                    
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_ServiceResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_ServiceResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Full_Service"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Full_Service"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Full_Service"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see pilotage.client.CUS_HPD_InterfaceQuery_WSService#startincident_QueryList_Full_Service
                    * @param incident_QueryList_Full_Service3
                
                    * @param authenticationInfo4
                
                */
                public  void startincident_QueryList_Full_Service(

                 pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_Service incident_QueryList_Full_Service3,pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE authenticationInfo4,
                    

                  final pilotage.client.CUS_HPD_InterfaceQuery_WSServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
             _operationClient.getOptions().setAction("urn:CUS_HPD_Interface-Query_WS/Incident_QueryList_Full_Service");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    incident_QueryList_Full_Service3,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_QueryList_Full_Service")), new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_QueryList_Full_Service"));
                                                
                                         // add the soap_headers only if they are not null
                                        if (authenticationInfo4!=null){
                                           
                                                    org.apache.axiom.om.OMElement omElementauthenticationInfo4 = toOM(authenticationInfo4, optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_QueryList_Full_Service")));
                                                    addHeader(omElementauthenticationInfo4,env);
                                                
                                        }
                                    
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_ServiceResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultincident_QueryList_Full_Service(
                                        (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_ServiceResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorincident_QueryList_Full_Service(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Full_Service"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Full_Service"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Full_Service"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorincident_QueryList_Full_Service(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Full_Service(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Full_Service(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Full_Service(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Full_Service(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Full_Service(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Full_Service(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Full_Service(f);
                                            }
									    } else {
										    callback.receiveErrorincident_QueryList_Full_Service(f);
									    }
									} else {
									    callback.receiveErrorincident_QueryList_Full_Service(f);
									}
								} else {
								    callback.receiveErrorincident_QueryList_Full_Service(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorincident_QueryList_Full_Service(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[0].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[0].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see pilotage.client.CUS_HPD_InterfaceQuery_WSService#incident_Query_Full_Service
                     * @param incident_Query_Full_Service6
                    
                     * @param authenticationInfo7
                    
                     */

                    

                            public  pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_ServiceResponse incident_Query_Full_Service(

                            pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_Service incident_Query_Full_Service6,pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE authenticationInfo7)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
              _operationClient.getOptions().setAction("urn:CUS_HPD_Interface-Query_WS/Incident_Query_Full_Service");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    incident_Query_Full_Service6,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_Query_Full_Service")), new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_Query_Full_Service"));
                                                
                                               env.build();
                                    
                                        // add the children only if the parameter is not null
                                        if (authenticationInfo7!=null){
                                            
                                                    org.apache.axiom.om.OMElement omElementauthenticationInfo7 = toOM(authenticationInfo7, optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_Query_Full_Service")));
                                                    addHeader(omElementauthenticationInfo7,env);
                                                
                                        }
                                    
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_ServiceResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_ServiceResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Full_Service"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Full_Service"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Full_Service"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see pilotage.client.CUS_HPD_InterfaceQuery_WSService#startincident_Query_Full_Service
                    * @param incident_Query_Full_Service6
                
                    * @param authenticationInfo7
                
                */
                public  void startincident_Query_Full_Service(

                 pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_Service incident_Query_Full_Service6,pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE authenticationInfo7,
                    

                  final pilotage.client.CUS_HPD_InterfaceQuery_WSServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
             _operationClient.getOptions().setAction("urn:CUS_HPD_Interface-Query_WS/Incident_Query_Full_Service");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    incident_Query_Full_Service6,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_Query_Full_Service")), new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_Query_Full_Service"));
                                                
                                         // add the soap_headers only if they are not null
                                        if (authenticationInfo7!=null){
                                           
                                                    org.apache.axiom.om.OMElement omElementauthenticationInfo7 = toOM(authenticationInfo7, optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_Query_Full_Service")));
                                                    addHeader(omElementauthenticationInfo7,env);
                                                
                                        }
                                    
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_ServiceResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultincident_Query_Full_Service(
                                        (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_ServiceResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorincident_Query_Full_Service(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Full_Service"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Full_Service"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Full_Service"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorincident_Query_Full_Service(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Full_Service(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Full_Service(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Full_Service(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Full_Service(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Full_Service(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Full_Service(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Full_Service(f);
                                            }
									    } else {
										    callback.receiveErrorincident_Query_Full_Service(f);
									    }
									} else {
									    callback.receiveErrorincident_Query_Full_Service(f);
									}
								} else {
								    callback.receiveErrorincident_Query_Full_Service(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorincident_Query_Full_Service(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[1].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[1].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see pilotage.client.CUS_HPD_InterfaceQuery_WSService#incident_QueryList_Light_Service
                     * @param incident_QueryList_Light_Service9
                    
                     * @param authenticationInfo10
                    
                     */

                    

                            public  pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_ServiceResponse incident_QueryList_Light_Service(

                            pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_Service incident_QueryList_Light_Service9,pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE authenticationInfo10)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
              _operationClient.getOptions().setAction("urn:CUS_HPD_Interface-Query_WS/Incident_QueryList_Light_Service");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    incident_QueryList_Light_Service9,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_QueryList_Light_Service")), new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_QueryList_Light_Service"));
                                                
                                               env.build();
                                    
                                        // add the children only if the parameter is not null
                                        if (authenticationInfo10!=null){
                                            
                                                    org.apache.axiom.om.OMElement omElementauthenticationInfo10 = toOM(authenticationInfo10, optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_QueryList_Light_Service")));
                                                    addHeader(omElementauthenticationInfo10,env);
                                                
                                        }
                                    
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_ServiceResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_ServiceResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Light_Service"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Light_Service"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Light_Service"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see pilotage.client.CUS_HPD_InterfaceQuery_WSService#startincident_QueryList_Light_Service
                    * @param incident_QueryList_Light_Service9
                
                    * @param authenticationInfo10
                
                */
                public  void startincident_QueryList_Light_Service(

                 pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_Service incident_QueryList_Light_Service9,pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE authenticationInfo10,
                    

                  final pilotage.client.CUS_HPD_InterfaceQuery_WSServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
             _operationClient.getOptions().setAction("urn:CUS_HPD_Interface-Query_WS/Incident_QueryList_Light_Service");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    incident_QueryList_Light_Service9,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_QueryList_Light_Service")), new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_QueryList_Light_Service"));
                                                
                                         // add the soap_headers only if they are not null
                                        if (authenticationInfo10!=null){
                                           
                                                    org.apache.axiom.om.OMElement omElementauthenticationInfo10 = toOM(authenticationInfo10, optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_QueryList_Light_Service")));
                                                    addHeader(omElementauthenticationInfo10,env);
                                                
                                        }
                                    
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_ServiceResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultincident_QueryList_Light_Service(
                                        (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_ServiceResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorincident_QueryList_Light_Service(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Light_Service"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Light_Service"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_QueryList_Light_Service"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorincident_QueryList_Light_Service(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Light_Service(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Light_Service(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Light_Service(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Light_Service(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Light_Service(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Light_Service(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_QueryList_Light_Service(f);
                                            }
									    } else {
										    callback.receiveErrorincident_QueryList_Light_Service(f);
									    }
									} else {
									    callback.receiveErrorincident_QueryList_Light_Service(f);
									}
								} else {
								    callback.receiveErrorincident_QueryList_Light_Service(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorincident_QueryList_Light_Service(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[2].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[2].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * 
                     * @see pilotage.client.CUS_HPD_InterfaceQuery_WSService#incident_Query_Light_Service
                     * @param incident_Query_Light_Service12
                    
                     * @param authenticationInfo13
                    
                     */

                    

                            public  pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_ServiceResponse incident_Query_Light_Service(

                            pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_Service incident_Query_Light_Service12,pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE authenticationInfo13)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
              _operationClient.getOptions().setAction("urn:CUS_HPD_Interface-Query_WS/Incident_Query_Light_Service");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    incident_Query_Light_Service12,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_Query_Light_Service")), new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_Query_Light_Service"));
                                                
                                               env.build();
                                    
                                        // add the children only if the parameter is not null
                                        if (authenticationInfo13!=null){
                                            
                                                    org.apache.axiom.om.OMElement omElementauthenticationInfo13 = toOM(authenticationInfo13, optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_Query_Light_Service")));
                                                    addHeader(omElementauthenticationInfo13,env);
                                                
                                        }
                                    
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_ServiceResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_ServiceResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Light_Service"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Light_Service"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Light_Service"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * 
                * @see pilotage.client.CUS_HPD_InterfaceQuery_WSService#startincident_Query_Light_Service
                    * @param incident_Query_Light_Service12
                
                    * @param authenticationInfo13
                
                */
                public  void startincident_Query_Light_Service(

                 pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_Service incident_Query_Light_Service12,pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE authenticationInfo13,
                    

                  final pilotage.client.CUS_HPD_InterfaceQuery_WSServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
             _operationClient.getOptions().setAction("urn:CUS_HPD_Interface-Query_WS/Incident_Query_Light_Service");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    incident_Query_Light_Service12,
                                                    optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_Query_Light_Service")), new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                    "incident_Query_Light_Service"));
                                                
                                         // add the soap_headers only if they are not null
                                        if (authenticationInfo13!=null){
                                           
                                                    org.apache.axiom.om.OMElement omElementauthenticationInfo13 = toOM(authenticationInfo13, optimizeContent(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS", "incident_Query_Light_Service")));
                                                    addHeader(omElementauthenticationInfo13,env);
                                                
                                        }
                                    
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_ServiceResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultincident_Query_Light_Service(
                                        (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_ServiceResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorincident_Query_Light_Service(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Light_Service"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Light_Service"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"Incident_Query_Light_Service"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorincident_Query_Light_Service(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Light_Service(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Light_Service(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Light_Service(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Light_Service(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Light_Service(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Light_Service(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorincident_Query_Light_Service(f);
                                            }
									    } else {
										    callback.receiveErrorincident_Query_Light_Service(f);
									    }
									} else {
									    callback.receiveErrorincident_Query_Light_Service(f);
									}
								} else {
								    callback.receiveErrorincident_Query_Light_Service(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorincident_Query_Light_Service(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[3].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[3].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                


       /**
        *  A utility method that copies the namepaces from the SOAPEnvelope
        */
       private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
        }
       return returnMap;
    }

    
    
    private javax.xml.namespace.QName[] opNameArray = null;
    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        

        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;   
            }
        }
        return false;
    }
     //http://itsm-mt-pp/arsys/services/ARService?server=itsm-ars-pp.windows.appli&webService=CUS_HPD_Interface-Query_WS
        public static class Incident_Query_Full_Service
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "Incident_Query_Full_Service",
                "ns1");

            

                        /**
                        * field for Incident_Query_Full_Service
                        */

                        
                                    protected InputMapping8 localIncident_Query_Full_Service ;
                                

                           /**
                           * Auto generated getter method
                           * @return InputMapping8
                           */
                           public  InputMapping8 getIncident_Query_Full_Service(){
                               return localIncident_Query_Full_Service;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Incident_Query_Full_Service
                               */
                               public void setIncident_Query_Full_Service(InputMapping8 param){
                            
                                            this.localIncident_Query_Full_Service=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localIncident_Query_Full_Service==null){
                                   throw new org.apache.axis2.databinding.ADBException("Incident_Query_Full_Service cannot be null!");
                                 }
                                 localIncident_Query_Full_Service.serialize(MY_QNAME,xmlWriter);
                            

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localIncident_Query_Full_Service.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Incident_Query_Full_Service parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Incident_Query_Full_Service object =
                new Incident_Query_Full_Service();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Incident_Query_Full_Service").equals(reader.getName())){
                                
                                                object.setIncident_Query_Full_Service(InputMapping8.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class GetListValues_type3
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = getListValues_type3
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Numero_Incident
                        */

                        
                                    protected java.lang.String localNumero_Incident ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumero_Incident(){
                               return localNumero_Incident;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Numero_Incident
                               */
                               public void setNumero_Incident(java.lang.String param){
                            
                                            this.localNumero_Incident=param;
                                    

                               }
                            

                        /**
                        * field for Resume
                        */

                        
                                    protected java.lang.String localResume ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getResume(){
                               return localResume;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Resume
                               */
                               public void setResume(java.lang.String param){
                            
                                            this.localResume=param;
                                    

                               }
                            

                        /**
                        * field for Remarques
                        */

                        
                                    protected java.lang.String localRemarques ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRemarquesTracker = false ;

                           public boolean isRemarquesSpecified(){
                               return localRemarquesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRemarques(){
                               return localRemarques;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Remarques
                               */
                               public void setRemarques(java.lang.String param){
                            localRemarquesTracker = param != null;
                                   
                                            this.localRemarques=param;
                                    

                               }
                            

                        /**
                        * field for Createur
                        */

                        
                                    protected java.lang.String localCreateur ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreateur(){
                               return localCreateur;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Createur
                               */
                               public void setCreateur(java.lang.String param){
                            
                                            this.localCreateur=param;
                                    

                               }
                            

                        /**
                        * field for Date_creation
                        */

                        
                                    protected java.util.Calendar localDate_creation ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_creationTracker = false ;

                           public boolean isDate_creationSpecified(){
                               return localDate_creationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_creation(){
                               return localDate_creation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_creation
                               */
                               public void setDate_creation(java.util.Calendar param){
                            localDate_creationTracker = param != null;
                                   
                                            this.localDate_creation=param;
                                    

                               }
                            

                        /**
                        * field for Date_signalement
                        */

                        
                                    protected java.util.Calendar localDate_signalement ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_signalementTracker = false ;

                           public boolean isDate_signalementSpecified(){
                               return localDate_signalementTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_signalement(){
                               return localDate_signalement;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_signalement
                               */
                               public void setDate_signalement(java.util.Calendar param){
                            localDate_signalementTracker = param != null;
                                   
                                            this.localDate_signalement=param;
                                    

                               }
                            

                        /**
                        * field for Modifie_par
                        */

                        
                                    protected java.lang.String localModifie_par ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifie_parTracker = false ;

                           public boolean isModifie_parSpecified(){
                               return localModifie_parTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifie_par(){
                               return localModifie_par;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Modifie_par
                               */
                               public void setModifie_par(java.lang.String param){
                            localModifie_parTracker = param != null;
                                   
                                            this.localModifie_par=param;
                                    

                               }
                            

                        /**
                        * field for Date_modification
                        */

                        
                                    protected java.util.Calendar localDate_modification ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_modificationTracker = false ;

                           public boolean isDate_modificationSpecified(){
                               return localDate_modificationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_modification(){
                               return localDate_modification;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_modification
                               */
                               public void setDate_modification(java.util.Calendar param){
                            localDate_modificationTracker = param != null;
                                   
                                            this.localDate_modification=param;
                                    

                               }
                            

                        /**
                        * field for Etat
                        */

                        
                                    protected java.lang.String localEtat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEtatTracker = false ;

                           public boolean isEtatSpecified(){
                               return localEtatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEtat(){
                               return localEtat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Etat
                               */
                               public void setEtat(java.lang.String param){
                            localEtatTracker = param != null;
                                   
                                            this.localEtat=param;
                                    

                               }
                            

                        /**
                        * field for Motif_Etat
                        */

                        
                                    protected java.lang.String localMotif_Etat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMotif_EtatTracker = false ;

                           public boolean isMotif_EtatSpecified(){
                               return localMotif_EtatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMotif_Etat(){
                               return localMotif_Etat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Motif_Etat
                               */
                               public void setMotif_Etat(java.lang.String param){
                            localMotif_EtatTracker = param != null;
                                   
                                            this.localMotif_Etat=param;
                                    

                               }
                            

                        /**
                        * field for Source_signalee
                        */

                        
                                    protected java.lang.String localSource_signalee ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSource_signaleeTracker = false ;

                           public boolean isSource_signaleeSpecified(){
                               return localSource_signaleeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSource_signalee(){
                               return localSource_signalee;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Source_signalee
                               */
                               public void setSource_signalee(java.lang.String param){
                            localSource_signaleeTracker = param != null;
                                   
                                            this.localSource_signalee=param;
                                    

                               }
                            

                        /**
                        * field for Type_incident
                        */

                        
                                    protected java.lang.String localType_incident ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localType_incidentTracker = false ;

                           public boolean isType_incidentSpecified(){
                               return localType_incidentTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getType_incident(){
                               return localType_incident;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Type_incident
                               */
                               public void setType_incident(java.lang.String param){
                            localType_incidentTracker = param != null;
                                   
                                            this.localType_incident=param;
                                    

                               }
                            

                        /**
                        * field for Impact
                        */

                        
                                    protected java.lang.String localImpact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localImpactTracker = false ;

                           public boolean isImpactSpecified(){
                               return localImpactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getImpact(){
                               return localImpact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Impact
                               */
                               public void setImpact(java.lang.String param){
                            localImpactTracker = param != null;
                                   
                                            this.localImpact=param;
                                    

                               }
                            

                        /**
                        * field for Urgence
                        */

                        
                                    protected java.lang.String localUrgence ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUrgenceTracker = false ;

                           public boolean isUrgenceSpecified(){
                               return localUrgenceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUrgence(){
                               return localUrgence;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Urgence
                               */
                               public void setUrgence(java.lang.String param){
                            localUrgenceTracker = param != null;
                                   
                                            this.localUrgence=param;
                                    

                               }
                            

                        /**
                        * field for Priorite
                        */

                        
                                    protected java.lang.String localPriorite ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrioriteTracker = false ;

                           public boolean isPrioriteSpecified(){
                               return localPrioriteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPriorite(){
                               return localPriorite;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Priorite
                               */
                               public void setPriorite(java.lang.String param){
                            localPrioriteTracker = param != null;
                                   
                                            this.localPriorite=param;
                                    

                               }
                            

                        /**
                        * field for Groupe_Affecte
                        */

                        
                                    protected java.lang.String localGroupe_Affecte ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localGroupe_AffecteTracker = false ;

                           public boolean isGroupe_AffecteSpecified(){
                               return localGroupe_AffecteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getGroupe_Affecte(){
                               return localGroupe_Affecte;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Groupe_Affecte
                               */
                               public void setGroupe_Affecte(java.lang.String param){
                            localGroupe_AffecteTracker = param != null;
                                   
                                            this.localGroupe_Affecte=param;
                                    

                               }
                            

                        /**
                        * field for Intervenant
                        */

                        
                                    protected java.lang.String localIntervenant ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIntervenantTracker = false ;

                           public boolean isIntervenantSpecified(){
                               return localIntervenantTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getIntervenant(){
                               return localIntervenant;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Intervenant
                               */
                               public void setIntervenant(java.lang.String param){
                            localIntervenantTracker = param != null;
                                   
                                            this.localIntervenant=param;
                                    

                               }
                            

                        /**
                        * field for Date_resolution
                        */

                        
                                    protected java.util.Calendar localDate_resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_resolutionTracker = false ;

                           public boolean isDate_resolutionSpecified(){
                               return localDate_resolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_resolution(){
                               return localDate_resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_resolution
                               */
                               public void setDate_resolution(java.util.Calendar param){
                            localDate_resolutionTracker = param != null;
                                   
                                            this.localDate_resolution=param;
                                    

                               }
                            

                        /**
                        * field for Delai_resolution
                        */

                        
                                    protected java.math.BigDecimal localDelai_resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDelai_resolutionTracker = false ;

                           public boolean isDelai_resolutionSpecified(){
                               return localDelai_resolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.math.BigDecimal
                           */
                           public  java.math.BigDecimal getDelai_resolution(){
                               return localDelai_resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Delai_resolution
                               */
                               public void setDelai_resolution(java.math.BigDecimal param){
                            localDelai_resolutionTracker = param != null;
                                   
                                            this.localDelai_resolution=param;
                                    

                               }
                            

                        /**
                        * field for Groupe_resolution
                        */

                        
                                    protected java.lang.String localGroupe_resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localGroupe_resolutionTracker = false ;

                           public boolean isGroupe_resolutionSpecified(){
                               return localGroupe_resolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getGroupe_resolution(){
                               return localGroupe_resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Groupe_resolution
                               */
                               public void setGroupe_resolution(java.lang.String param){
                            localGroupe_resolutionTracker = param != null;
                                   
                                            this.localGroupe_resolution=param;
                                    

                               }
                            

                        /**
                        * field for Resolution
                        */

                        
                                    protected java.lang.String localResolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localResolutionTracker = false ;

                           public boolean isResolutionSpecified(){
                               return localResolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getResolution(){
                               return localResolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Resolution
                               */
                               public void setResolution(java.lang.String param){
                            localResolutionTracker = param != null;
                                   
                                            this.localResolution=param;
                                    

                               }
                            

                        /**
                        * field for Methode_Resolution
                        */

                        
                                    protected java.lang.String localMethode_Resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMethode_ResolutionTracker = false ;

                           public boolean isMethode_ResolutionSpecified(){
                               return localMethode_ResolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMethode_Resolution(){
                               return localMethode_Resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Methode_Resolution
                               */
                               public void setMethode_Resolution(java.lang.String param){
                            localMethode_ResolutionTracker = param != null;
                                   
                                            this.localMethode_Resolution=param;
                                    

                               }
                            

                        /**
                        * field for Type_Association_Incident
                        */

                        
                                    protected Type_Association_IncidentType localType_Association_Incident ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localType_Association_IncidentTracker = false ;

                           public boolean isType_Association_IncidentSpecified(){
                               return localType_Association_IncidentTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return Type_Association_IncidentType
                           */
                           public  Type_Association_IncidentType getType_Association_Incident(){
                               return localType_Association_Incident;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Type_Association_Incident
                               */
                               public void setType_Association_Incident(Type_Association_IncidentType param){
                            localType_Association_IncidentTracker = true;
                                   
                                            this.localType_Association_Incident=param;
                                    

                               }
                            

                        /**
                        * field for Societe_Client
                        */

                        
                                    protected java.lang.String localSociete_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSociete_Client(){
                               return localSociete_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Societe_Client
                               */
                               public void setSociete_Client(java.lang.String param){
                            
                                            this.localSociete_Client=param;
                                    

                               }
                            

                        /**
                        * field for Departement_Client
                        */

                        
                                    protected java.lang.String localDepartement_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDepartement_Client(){
                               return localDepartement_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Departement_Client
                               */
                               public void setDepartement_Client(java.lang.String param){
                            
                                            this.localDepartement_Client=param;
                                    

                               }
                            

                        /**
                        * field for Site_Client
                        */

                        
                                    protected java.lang.String localSite_Client ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSite_ClientTracker = false ;

                           public boolean isSite_ClientSpecified(){
                               return localSite_ClientTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSite_Client(){
                               return localSite_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Site_Client
                               */
                               public void setSite_Client(java.lang.String param){
                            localSite_ClientTracker = param != null;
                                   
                                            this.localSite_Client=param;
                                    

                               }
                            

                        /**
                        * field for Login_Client
                        */

                        
                                    protected java.lang.String localLogin_Client ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogin_ClientTracker = false ;

                           public boolean isLogin_ClientSpecified(){
                               return localLogin_ClientTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogin_Client(){
                               return localLogin_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Login_Client
                               */
                               public void setLogin_Client(java.lang.String param){
                            localLogin_ClientTracker = param != null;
                                   
                                            this.localLogin_Client=param;
                                    

                               }
                            

                        /**
                        * field for Nom_Client
                        */

                        
                                    protected java.lang.String localNom_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNom_Client(){
                               return localNom_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nom_Client
                               */
                               public void setNom_Client(java.lang.String param){
                            
                                            this.localNom_Client=param;
                                    

                               }
                            

                        /**
                        * field for Prenom_Client
                        */

                        
                                    protected java.lang.String localPrenom_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrenom_Client(){
                               return localPrenom_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Prenom_Client
                               */
                               public void setPrenom_Client(java.lang.String param){
                            
                                            this.localPrenom_Client=param;
                                    

                               }
                            

                        /**
                        * field for Adresse_mail_Client
                        */

                        
                                    protected java.lang.String localAdresse_mail_Client ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAdresse_mail_ClientTracker = false ;

                           public boolean isAdresse_mail_ClientSpecified(){
                               return localAdresse_mail_ClientTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAdresse_mail_Client(){
                               return localAdresse_mail_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Adresse_mail_Client
                               */
                               public void setAdresse_mail_Client(java.lang.String param){
                            localAdresse_mail_ClientTracker = param != null;
                                   
                                            this.localAdresse_mail_Client=param;
                                    

                               }
                            

                        /**
                        * field for Numero_Telephone_Client
                        */

                        
                                    protected java.lang.String localNumero_Telephone_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumero_Telephone_Client(){
                               return localNumero_Telephone_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Numero_Telephone_Client
                               */
                               public void setNumero_Telephone_Client(java.lang.String param){
                            
                                            this.localNumero_Telephone_Client=param;
                                    

                               }
                            

                        /**
                        * field for VIP
                        */

                        
                                    protected VIPType localVIP ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localVIPTracker = false ;

                           public boolean isVIPSpecified(){
                               return localVIPTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return VIPType
                           */
                           public  VIPType getVIP(){
                               return localVIP;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param VIP
                               */
                               public void setVIP(VIPType param){
                            localVIPTracker = true;
                                   
                                            this.localVIP=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Niv1
                        */

                        
                                    protected java.lang.String localCateg_Ope_Niv1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Niv1Tracker = false ;

                           public boolean isCateg_Ope_Niv1Specified(){
                               return localCateg_Ope_Niv1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Niv1(){
                               return localCateg_Ope_Niv1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Niv1
                               */
                               public void setCateg_Ope_Niv1(java.lang.String param){
                            localCateg_Ope_Niv1Tracker = param != null;
                                   
                                            this.localCateg_Ope_Niv1=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Niv2
                        */

                        
                                    protected java.lang.String localCateg_Ope_Niv2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Niv2Tracker = false ;

                           public boolean isCateg_Ope_Niv2Specified(){
                               return localCateg_Ope_Niv2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Niv2(){
                               return localCateg_Ope_Niv2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Niv2
                               */
                               public void setCateg_Ope_Niv2(java.lang.String param){
                            localCateg_Ope_Niv2Tracker = param != null;
                                   
                                            this.localCateg_Ope_Niv2=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Niv3
                        */

                        
                                    protected java.lang.String localCateg_Ope_Niv3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Niv3Tracker = false ;

                           public boolean isCateg_Ope_Niv3Specified(){
                               return localCateg_Ope_Niv3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Niv3(){
                               return localCateg_Ope_Niv3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Niv3
                               */
                               public void setCateg_Ope_Niv3(java.lang.String param){
                            localCateg_Ope_Niv3Tracker = param != null;
                                   
                                            this.localCateg_Ope_Niv3=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Niv1
                        */

                        
                                    protected java.lang.String localCateg_Prod_Niv1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Niv1Tracker = false ;

                           public boolean isCateg_Prod_Niv1Specified(){
                               return localCateg_Prod_Niv1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Niv1(){
                               return localCateg_Prod_Niv1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Niv1
                               */
                               public void setCateg_Prod_Niv1(java.lang.String param){
                            localCateg_Prod_Niv1Tracker = param != null;
                                   
                                            this.localCateg_Prod_Niv1=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Niv2
                        */

                        
                                    protected java.lang.String localCateg_Prod_Niv2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Niv2Tracker = false ;

                           public boolean isCateg_Prod_Niv2Specified(){
                               return localCateg_Prod_Niv2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Niv2(){
                               return localCateg_Prod_Niv2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Niv2
                               */
                               public void setCateg_Prod_Niv2(java.lang.String param){
                            localCateg_Prod_Niv2Tracker = param != null;
                                   
                                            this.localCateg_Prod_Niv2=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Niv3
                        */

                        
                                    protected java.lang.String localCateg_Prod_Niv3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Niv3Tracker = false ;

                           public boolean isCateg_Prod_Niv3Specified(){
                               return localCateg_Prod_Niv3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Niv3(){
                               return localCateg_Prod_Niv3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Niv3
                               */
                               public void setCateg_Prod_Niv3(java.lang.String param){
                            localCateg_Prod_Niv3Tracker = param != null;
                                   
                                            this.localCateg_Prod_Niv3=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Produit
                        */

                        
                                    protected java.lang.String localCateg_Prod_Produit ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_ProduitTracker = false ;

                           public boolean isCateg_Prod_ProduitSpecified(){
                               return localCateg_Prod_ProduitTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Produit(){
                               return localCateg_Prod_Produit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Produit
                               */
                               public void setCateg_Prod_Produit(java.lang.String param){
                            localCateg_Prod_ProduitTracker = param != null;
                                   
                                            this.localCateg_Prod_Produit=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Modele
                        */

                        
                                    protected java.lang.String localCateg_Prod_Modele ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_ModeleTracker = false ;

                           public boolean isCateg_Prod_ModeleSpecified(){
                               return localCateg_Prod_ModeleTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Modele(){
                               return localCateg_Prod_Modele;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Modele
                               */
                               public void setCateg_Prod_Modele(java.lang.String param){
                            localCateg_Prod_ModeleTracker = param != null;
                                   
                                            this.localCateg_Prod_Modele=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Fabricant
                        */

                        
                                    protected java.lang.String localCateg_Prod_Fabricant ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_FabricantTracker = false ;

                           public boolean isCateg_Prod_FabricantSpecified(){
                               return localCateg_Prod_FabricantTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Fabricant(){
                               return localCateg_Prod_Fabricant;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Fabricant
                               */
                               public void setCateg_Prod_Fabricant(java.lang.String param){
                            localCateg_Prod_FabricantTracker = param != null;
                                   
                                            this.localCateg_Prod_Fabricant=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Resol_Niv1
                        */

                        
                                    protected java.lang.String localCateg_Ope_Resol_Niv1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Resol_Niv1Tracker = false ;

                           public boolean isCateg_Ope_Resol_Niv1Specified(){
                               return localCateg_Ope_Resol_Niv1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Resol_Niv1(){
                               return localCateg_Ope_Resol_Niv1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Resol_Niv1
                               */
                               public void setCateg_Ope_Resol_Niv1(java.lang.String param){
                            localCateg_Ope_Resol_Niv1Tracker = param != null;
                                   
                                            this.localCateg_Ope_Resol_Niv1=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Resol_Niv2
                        */

                        
                                    protected java.lang.String localCateg_Ope_Resol_Niv2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Resol_Niv2Tracker = false ;

                           public boolean isCateg_Ope_Resol_Niv2Specified(){
                               return localCateg_Ope_Resol_Niv2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Resol_Niv2(){
                               return localCateg_Ope_Resol_Niv2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Resol_Niv2
                               */
                               public void setCateg_Ope_Resol_Niv2(java.lang.String param){
                            localCateg_Ope_Resol_Niv2Tracker = param != null;
                                   
                                            this.localCateg_Ope_Resol_Niv2=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Resol_Niv3
                        */

                        
                                    protected java.lang.String localCateg_Ope_Resol_Niv3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Resol_Niv3Tracker = false ;

                           public boolean isCateg_Ope_Resol_Niv3Specified(){
                               return localCateg_Ope_Resol_Niv3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Resol_Niv3(){
                               return localCateg_Ope_Resol_Niv3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Resol_Niv3
                               */
                               public void setCateg_Ope_Resol_Niv3(java.lang.String param){
                            localCateg_Ope_Resol_Niv3Tracker = param != null;
                                   
                                            this.localCateg_Ope_Resol_Niv3=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Niv1
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Niv1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_Niv1Tracker = false ;

                           public boolean isCateg_Prod_Resol_Niv1Specified(){
                               return localCateg_Prod_Resol_Niv1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Niv1(){
                               return localCateg_Prod_Resol_Niv1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Niv1
                               */
                               public void setCateg_Prod_Resol_Niv1(java.lang.String param){
                            localCateg_Prod_Resol_Niv1Tracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Niv1=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Niv2
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Niv2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_Niv2Tracker = false ;

                           public boolean isCateg_Prod_Resol_Niv2Specified(){
                               return localCateg_Prod_Resol_Niv2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Niv2(){
                               return localCateg_Prod_Resol_Niv2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Niv2
                               */
                               public void setCateg_Prod_Resol_Niv2(java.lang.String param){
                            localCateg_Prod_Resol_Niv2Tracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Niv2=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Niv3
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Niv3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_Niv3Tracker = false ;

                           public boolean isCateg_Prod_Resol_Niv3Specified(){
                               return localCateg_Prod_Resol_Niv3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Niv3(){
                               return localCateg_Prod_Resol_Niv3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Niv3
                               */
                               public void setCateg_Prod_Resol_Niv3(java.lang.String param){
                            localCateg_Prod_Resol_Niv3Tracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Niv3=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Produit
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Produit ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_ProduitTracker = false ;

                           public boolean isCateg_Prod_Resol_ProduitSpecified(){
                               return localCateg_Prod_Resol_ProduitTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Produit(){
                               return localCateg_Prod_Resol_Produit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Produit
                               */
                               public void setCateg_Prod_Resol_Produit(java.lang.String param){
                            localCateg_Prod_Resol_ProduitTracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Produit=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Modele
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Modele ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_ModeleTracker = false ;

                           public boolean isCateg_Prod_Resol_ModeleSpecified(){
                               return localCateg_Prod_Resol_ModeleTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Modele(){
                               return localCateg_Prod_Resol_Modele;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Modele
                               */
                               public void setCateg_Prod_Resol_Modele(java.lang.String param){
                            localCateg_Prod_Resol_ModeleTracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Modele=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Fabricant
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Fabricant ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_FabricantTracker = false ;

                           public boolean isCateg_Prod_Resol_FabricantSpecified(){
                               return localCateg_Prod_Resol_FabricantTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Fabricant(){
                               return localCateg_Prod_Resol_Fabricant;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Fabricant
                               */
                               public void setCateg_Prod_Resol_Fabricant(java.lang.String param){
                            localCateg_Prod_Resol_FabricantTracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Fabricant=param;
                                    

                               }
                            

                        /**
                        * field for Societe_Contact
                        */

                        
                                    protected java.lang.String localSociete_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSociete_ContactTracker = false ;

                           public boolean isSociete_ContactSpecified(){
                               return localSociete_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSociete_Contact(){
                               return localSociete_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Societe_Contact
                               */
                               public void setSociete_Contact(java.lang.String param){
                            localSociete_ContactTracker = param != null;
                                   
                                            this.localSociete_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Departement_Contact
                        */

                        
                                    protected java.lang.String localDepartement_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDepartement_ContactTracker = false ;

                           public boolean isDepartement_ContactSpecified(){
                               return localDepartement_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDepartement_Contact(){
                               return localDepartement_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Departement_Contact
                               */
                               public void setDepartement_Contact(java.lang.String param){
                            localDepartement_ContactTracker = param != null;
                                   
                                            this.localDepartement_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Site_Contact
                        */

                        
                                    protected java.lang.String localSite_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSite_ContactTracker = false ;

                           public boolean isSite_ContactSpecified(){
                               return localSite_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSite_Contact(){
                               return localSite_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Site_Contact
                               */
                               public void setSite_Contact(java.lang.String param){
                            localSite_ContactTracker = param != null;
                                   
                                            this.localSite_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Nom_Contact
                        */

                        
                                    protected java.lang.String localNom_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNom_ContactTracker = false ;

                           public boolean isNom_ContactSpecified(){
                               return localNom_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNom_Contact(){
                               return localNom_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nom_Contact
                               */
                               public void setNom_Contact(java.lang.String param){
                            localNom_ContactTracker = param != null;
                                   
                                            this.localNom_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Prenom_Contact
                        */

                        
                                    protected java.lang.String localPrenom_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrenom_ContactTracker = false ;

                           public boolean isPrenom_ContactSpecified(){
                               return localPrenom_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrenom_Contact(){
                               return localPrenom_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Prenom_Contact
                               */
                               public void setPrenom_Contact(java.lang.String param){
                            localPrenom_ContactTracker = param != null;
                                   
                                            this.localPrenom_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Numero_Telephone_Contact
                        */

                        
                                    protected java.lang.String localNumero_Telephone_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNumero_Telephone_ContactTracker = false ;

                           public boolean isNumero_Telephone_ContactSpecified(){
                               return localNumero_Telephone_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumero_Telephone_Contact(){
                               return localNumero_Telephone_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Numero_Telephone_Contact
                               */
                               public void setNumero_Telephone_Contact(java.lang.String param){
                            localNumero_Telephone_ContactTracker = param != null;
                                   
                                            this.localNumero_Telephone_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Adresse_mail_Contact
                        */

                        
                                    protected java.lang.String localAdresse_mail_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAdresse_mail_ContactTracker = false ;

                           public boolean isAdresse_mail_ContactSpecified(){
                               return localAdresse_mail_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAdresse_mail_Contact(){
                               return localAdresse_mail_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Adresse_mail_Contact
                               */
                               public void setAdresse_mail_Contact(java.lang.String param){
                            localAdresse_mail_ContactTracker = param != null;
                                   
                                            this.localAdresse_mail_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Nb_Relance
                        */

                        
                                    protected int localNb_Relance =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("0");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNb_RelanceTracker = false ;

                           public boolean isNb_RelanceSpecified(){
                               return localNb_RelanceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getNb_Relance(){
                               return localNb_Relance;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nb_Relance
                               */
                               public void setNb_Relance(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localNb_RelanceTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localNb_Relance=param;
                                    

                               }
                            

                        /**
                        * field for Absence_de_consigne
                        */

                        
                                    protected Absence_de_consigneType localAbsence_de_consigne ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAbsence_de_consigneTracker = false ;

                           public boolean isAbsence_de_consigneSpecified(){
                               return localAbsence_de_consigneTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return Absence_de_consigneType
                           */
                           public  Absence_de_consigneType getAbsence_de_consigne(){
                               return localAbsence_de_consigne;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Absence_de_consigne
                               */
                               public void setAbsence_de_consigne(Absence_de_consigneType param){
                            localAbsence_de_consigneTracker = true;
                                   
                                            this.localAbsence_de_consigne=param;
                                    

                               }
                            

                        /**
                        * field for Appel_astreinte
                        */

                        
                                    protected Absence_de_consigneType localAppel_astreinte ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAppel_astreinteTracker = false ;

                           public boolean isAppel_astreinteSpecified(){
                               return localAppel_astreinteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return Absence_de_consigneType
                           */
                           public  Absence_de_consigneType getAppel_astreinte(){
                               return localAppel_astreinte;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Appel_astreinte
                               */
                               public void setAppel_astreinte(Absence_de_consigneType param){
                            localAppel_astreinteTracker = true;
                                   
                                            this.localAppel_astreinte=param;
                                    

                               }
                            

                        /**
                        * field for Nb_Tickets_Fils
                        */

                        
                                    protected int localNb_Tickets_Fils =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("0");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNb_Tickets_FilsTracker = false ;

                           public boolean isNb_Tickets_FilsSpecified(){
                               return localNb_Tickets_FilsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getNb_Tickets_Fils(){
                               return localNb_Tickets_Fils;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nb_Tickets_Fils
                               */
                               public void setNb_Tickets_Fils(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localNb_Tickets_FilsTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localNb_Tickets_Fils=param;
                                    

                               }
                            

                        /**
                        * field for Environnement
                        */

                        
                                    protected EnvironnementType localEnvironnement ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnvironnementTracker = false ;

                           public boolean isEnvironnementSpecified(){
                               return localEnvironnementTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return EnvironnementType
                           */
                           public  EnvironnementType getEnvironnement(){
                               return localEnvironnement;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Environnement
                               */
                               public void setEnvironnement(EnvironnementType param){
                            localEnvironnementTracker = true;
                                   
                                            this.localEnvironnement=param;
                                    

                               }
                            

                        /**
                        * field for TicketSourceSignalee
                        */

                        
                                    protected java.lang.String localTicketSourceSignalee ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTicketSourceSignaleeTracker = false ;

                           public boolean isTicketSourceSignaleeSpecified(){
                               return localTicketSourceSignaleeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTicketSourceSignalee(){
                               return localTicketSourceSignalee;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TicketSourceSignalee
                               */
                               public void setTicketSourceSignalee(java.lang.String param){
                            localTicketSourceSignaleeTracker = param != null;
                                   
                                            this.localTicketSourceSignalee=param;
                                    

                               }
                            

                        /**
                        * field for TraitePilotage
                        */

                        
                                    protected Absence_de_consigneType localTraitePilotage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTraitePilotageTracker = false ;

                           public boolean isTraitePilotageSpecified(){
                               return localTraitePilotageTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return Absence_de_consigneType
                           */
                           public  Absence_de_consigneType getTraitePilotage(){
                               return localTraitePilotage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TraitePilotage
                               */
                               public void setTraitePilotage(Absence_de_consigneType param){
                            localTraitePilotageTracker = true;
                                   
                                            this.localTraitePilotage=param;
                                    

                               }
                            

                        /**
                        * field for Service
                        */

                        
                                    protected java.lang.String localService ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localServiceTracker = false ;

                           public boolean isServiceSpecified(){
                               return localServiceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getService(){
                               return localService;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Service
                               */
                               public void setService(java.lang.String param){
                            localServiceTracker = param != null;
                                   
                                            this.localService=param;
                                    

                               }
                            

                        /**
                        * field for HPD_CI
                        */

                        
                                    protected java.lang.String localHPD_CI ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHPD_CITracker = false ;

                           public boolean isHPD_CISpecified(){
                               return localHPD_CITracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getHPD_CI(){
                               return localHPD_CI;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HPD_CI
                               */
                               public void setHPD_CI(java.lang.String param){
                            localHPD_CITracker = param != null;
                                   
                                            this.localHPD_CI=param;
                                    

                               }
                            

                        /**
                        * field for ServiceCI
                        */

                        
                                    protected java.lang.String localServiceCI ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localServiceCITracker = false ;

                           public boolean isServiceCISpecified(){
                               return localServiceCITracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getServiceCI(){
                               return localServiceCI;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ServiceCI
                               */
                               public void setServiceCI(java.lang.String param){
                            localServiceCITracker = param != null;
                                   
                                            this.localServiceCI=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":getListValues_type3",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "getListValues_type3",
                           xmlWriter);
                   }

               
                   }
               
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Numero_Incident", xmlWriter);
                             

                                          if (localNumero_Incident==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Numero_Incident cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumero_Incident);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Resume", xmlWriter);
                             

                                          if (localResume==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Resume cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localResume);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localRemarquesTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Remarques", xmlWriter);
                             

                                          if (localRemarques==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Remarques cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRemarques);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Createur", xmlWriter);
                             

                                          if (localCreateur==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Createur cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreateur);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localDate_creationTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_creation", xmlWriter);
                             

                                          if (localDate_creation==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_creation cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_creation));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_signalementTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_signalement", xmlWriter);
                             

                                          if (localDate_signalement==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_signalement cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_signalement));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifie_parTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Modifie_par", xmlWriter);
                             

                                          if (localModifie_par==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Modifie_par cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifie_par);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_modificationTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_modification", xmlWriter);
                             

                                          if (localDate_modification==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_modification cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_modification));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEtatTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Etat", xmlWriter);
                             

                                          if (localEtat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Etat cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEtat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMotif_EtatTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Motif_Etat", xmlWriter);
                             

                                          if (localMotif_Etat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Motif_Etat cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMotif_Etat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSource_signaleeTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Source_signalee", xmlWriter);
                             

                                          if (localSource_signalee==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Source_signalee cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSource_signalee);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localType_incidentTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Type_incident", xmlWriter);
                             

                                          if (localType_incident==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Type_incident cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localType_incident);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localImpactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Impact", xmlWriter);
                             

                                          if (localImpact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Impact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localImpact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUrgenceTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Urgence", xmlWriter);
                             

                                          if (localUrgence==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Urgence cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUrgence);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPrioriteTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Priorite", xmlWriter);
                             

                                          if (localPriorite==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Priorite cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPriorite);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localGroupe_AffecteTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Groupe_Affecte", xmlWriter);
                             

                                          if (localGroupe_Affecte==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Groupe_Affecte cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localGroupe_Affecte);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIntervenantTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Intervenant", xmlWriter);
                             

                                          if (localIntervenant==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Intervenant cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localIntervenant);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_resolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_resolution", xmlWriter);
                             

                                          if (localDate_resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_resolution));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDelai_resolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Delai_resolution", xmlWriter);
                             

                                          if (localDelai_resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Delai_resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDelai_resolution));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localGroupe_resolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Groupe_resolution", xmlWriter);
                             

                                          if (localGroupe_resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Groupe_resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localGroupe_resolution);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localResolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Resolution", xmlWriter);
                             

                                          if (localResolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localResolution);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMethode_ResolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Methode_Resolution", xmlWriter);
                             

                                          if (localMethode_Resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Methode_Resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMethode_Resolution);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localType_Association_IncidentTracker){
                                    if (localType_Association_Incident==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "Type_Association_Incident", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localType_Association_Incident.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Type_Association_Incident"),
                                        xmlWriter);
                                    }
                                }
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Societe_Client", xmlWriter);
                             

                                          if (localSociete_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Societe_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSociete_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Departement_Client", xmlWriter);
                             

                                          if (localDepartement_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Departement_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDepartement_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localSite_ClientTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Site_Client", xmlWriter);
                             

                                          if (localSite_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Site_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSite_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogin_ClientTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Login_Client", xmlWriter);
                             

                                          if (localLogin_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Login_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogin_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nom_Client", xmlWriter);
                             

                                          if (localNom_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Nom_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNom_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Prenom_Client", xmlWriter);
                             

                                          if (localPrenom_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Prenom_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrenom_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localAdresse_mail_ClientTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Adresse_mail_Client", xmlWriter);
                             

                                          if (localAdresse_mail_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Adresse_mail_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAdresse_mail_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Numero_Telephone_Client", xmlWriter);
                             

                                          if (localNumero_Telephone_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Numero_Telephone_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumero_Telephone_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localVIPTracker){
                                    if (localVIP==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "VIP", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localVIP.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","VIP"),
                                        xmlWriter);
                                    }
                                } if (localCateg_Ope_Niv1Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Niv1", xmlWriter);
                             

                                          if (localCateg_Ope_Niv1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Niv1);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Ope_Niv2Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Niv2", xmlWriter);
                             

                                          if (localCateg_Ope_Niv2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Niv2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Ope_Niv3Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Niv3", xmlWriter);
                             

                                          if (localCateg_Ope_Niv3==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv3 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Niv3);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Niv1Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Niv1", xmlWriter);
                             

                                          if (localCateg_Prod_Niv1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Niv1);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Niv2Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Niv2", xmlWriter);
                             

                                          if (localCateg_Prod_Niv2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Niv2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Niv3Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Niv3", xmlWriter);
                             

                                          if (localCateg_Prod_Niv3==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv3 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Niv3);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_ProduitTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Produit", xmlWriter);
                             

                                          if (localCateg_Prod_Produit==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Produit cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Produit);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_ModeleTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Modele", xmlWriter);
                             

                                          if (localCateg_Prod_Modele==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Modele cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Modele);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_FabricantTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Fabricant", xmlWriter);
                             

                                          if (localCateg_Prod_Fabricant==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Fabricant cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Fabricant);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Ope_Resol_Niv1Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Resol_Niv1", xmlWriter);
                             

                                          if (localCateg_Ope_Resol_Niv1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Resol_Niv1);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Ope_Resol_Niv2Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Resol_Niv2", xmlWriter);
                             

                                          if (localCateg_Ope_Resol_Niv2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Resol_Niv2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Ope_Resol_Niv3Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Resol_Niv3", xmlWriter);
                             

                                          if (localCateg_Ope_Resol_Niv3==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv3 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Resol_Niv3);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_Niv1Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Niv1", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Niv1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Niv1);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_Niv2Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Niv2", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Niv2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Niv2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_Niv3Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Niv3", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Niv3==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv3 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Niv3);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_ProduitTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Produit", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Produit==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Produit cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Produit);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_ModeleTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Modele", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Modele==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Modele cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Modele);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_FabricantTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Fabricant", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Fabricant==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Fabricant cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Fabricant);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSociete_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Societe_Contact", xmlWriter);
                             

                                          if (localSociete_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Societe_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSociete_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDepartement_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Departement_Contact", xmlWriter);
                             

                                          if (localDepartement_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Departement_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDepartement_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSite_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Site_Contact", xmlWriter);
                             

                                          if (localSite_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Site_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSite_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNom_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nom_Contact", xmlWriter);
                             

                                          if (localNom_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Nom_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNom_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPrenom_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Prenom_Contact", xmlWriter);
                             

                                          if (localPrenom_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Prenom_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrenom_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNumero_Telephone_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Numero_Telephone_Contact", xmlWriter);
                             

                                          if (localNumero_Telephone_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Numero_Telephone_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumero_Telephone_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAdresse_mail_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Adresse_mail_Contact", xmlWriter);
                             

                                          if (localAdresse_mail_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Adresse_mail_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAdresse_mail_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNb_RelanceTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nb_Relance", xmlWriter);
                             
                                               if (localNb_Relance==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Nb_Relance cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Relance));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAbsence_de_consigneTracker){
                                    if (localAbsence_de_consigne==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "Absence_de_consigne", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localAbsence_de_consigne.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Absence_de_consigne"),
                                        xmlWriter);
                                    }
                                } if (localAppel_astreinteTracker){
                                    if (localAppel_astreinte==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "Appel_astreinte", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localAppel_astreinte.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Appel_astreinte"),
                                        xmlWriter);
                                    }
                                } if (localNb_Tickets_FilsTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nb_Tickets_Fils", xmlWriter);
                             
                                               if (localNb_Tickets_Fils==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Nb_Tickets_Fils cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Tickets_Fils));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnvironnementTracker){
                                    if (localEnvironnement==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "Environnement", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localEnvironnement.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Environnement"),
                                        xmlWriter);
                                    }
                                } if (localTicketSourceSignaleeTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "TicketSourceSignalee", xmlWriter);
                             

                                          if (localTicketSourceSignalee==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("TicketSourceSignalee cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTicketSourceSignalee);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTraitePilotageTracker){
                                    if (localTraitePilotage==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "TraitePilotage", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localTraitePilotage.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","TraitePilotage"),
                                        xmlWriter);
                                    }
                                } if (localServiceTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Service", xmlWriter);
                             

                                          if (localService==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Service cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localService);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localHPD_CITracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "HPD_CI", xmlWriter);
                             

                                          if (localHPD_CI==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("HPD_CI cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localHPD_CI);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localServiceCITracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "ServiceCI", xmlWriter);
                             

                                          if (localServiceCI==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ServiceCI cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localServiceCI);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Numero_Incident"));
                                 
                                        if (localNumero_Incident != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumero_Incident));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Numero_Incident cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Resume"));
                                 
                                        if (localResume != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResume));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Resume cannot be null!!");
                                        }
                                     if (localRemarquesTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Remarques"));
                                 
                                        if (localRemarques != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRemarques));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Remarques cannot be null!!");
                                        }
                                    }
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Createur"));
                                 
                                        if (localCreateur != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreateur));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Createur cannot be null!!");
                                        }
                                     if (localDate_creationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_creation"));
                                 
                                        if (localDate_creation != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_creation));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_creation cannot be null!!");
                                        }
                                    } if (localDate_signalementTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_signalement"));
                                 
                                        if (localDate_signalement != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_signalement));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_signalement cannot be null!!");
                                        }
                                    } if (localModifie_parTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Modifie_par"));
                                 
                                        if (localModifie_par != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifie_par));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Modifie_par cannot be null!!");
                                        }
                                    } if (localDate_modificationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_modification"));
                                 
                                        if (localDate_modification != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_modification));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_modification cannot be null!!");
                                        }
                                    } if (localEtatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Etat"));
                                 
                                        if (localEtat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEtat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Etat cannot be null!!");
                                        }
                                    } if (localMotif_EtatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Motif_Etat"));
                                 
                                        if (localMotif_Etat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMotif_Etat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Motif_Etat cannot be null!!");
                                        }
                                    } if (localSource_signaleeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Source_signalee"));
                                 
                                        if (localSource_signalee != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSource_signalee));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Source_signalee cannot be null!!");
                                        }
                                    } if (localType_incidentTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Type_incident"));
                                 
                                        if (localType_incident != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localType_incident));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Type_incident cannot be null!!");
                                        }
                                    } if (localImpactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Impact"));
                                 
                                        if (localImpact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImpact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Impact cannot be null!!");
                                        }
                                    } if (localUrgenceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Urgence"));
                                 
                                        if (localUrgence != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUrgence));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Urgence cannot be null!!");
                                        }
                                    } if (localPrioriteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Priorite"));
                                 
                                        if (localPriorite != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPriorite));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Priorite cannot be null!!");
                                        }
                                    } if (localGroupe_AffecteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Groupe_Affecte"));
                                 
                                        if (localGroupe_Affecte != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGroupe_Affecte));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Groupe_Affecte cannot be null!!");
                                        }
                                    } if (localIntervenantTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Intervenant"));
                                 
                                        if (localIntervenant != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIntervenant));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Intervenant cannot be null!!");
                                        }
                                    } if (localDate_resolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_resolution"));
                                 
                                        if (localDate_resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_resolution cannot be null!!");
                                        }
                                    } if (localDelai_resolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Delai_resolution"));
                                 
                                        if (localDelai_resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDelai_resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Delai_resolution cannot be null!!");
                                        }
                                    } if (localGroupe_resolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Groupe_resolution"));
                                 
                                        if (localGroupe_resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGroupe_resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Groupe_resolution cannot be null!!");
                                        }
                                    } if (localResolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Resolution"));
                                 
                                        if (localResolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Resolution cannot be null!!");
                                        }
                                    } if (localMethode_ResolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Methode_Resolution"));
                                 
                                        if (localMethode_Resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMethode_Resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Methode_Resolution cannot be null!!");
                                        }
                                    } if (localType_Association_IncidentTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Type_Association_Incident"));
                            
                            
                                    elementList.add(localType_Association_Incident==null?null:
                                    localType_Association_Incident);
                                }
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Societe_Client"));
                                 
                                        if (localSociete_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSociete_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Societe_Client cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Departement_Client"));
                                 
                                        if (localDepartement_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDepartement_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Departement_Client cannot be null!!");
                                        }
                                     if (localSite_ClientTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Site_Client"));
                                 
                                        if (localSite_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSite_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Site_Client cannot be null!!");
                                        }
                                    } if (localLogin_ClientTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Login_Client"));
                                 
                                        if (localLogin_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogin_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Login_Client cannot be null!!");
                                        }
                                    }
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nom_Client"));
                                 
                                        if (localNom_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNom_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Nom_Client cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Prenom_Client"));
                                 
                                        if (localPrenom_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrenom_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Prenom_Client cannot be null!!");
                                        }
                                     if (localAdresse_mail_ClientTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Adresse_mail_Client"));
                                 
                                        if (localAdresse_mail_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAdresse_mail_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Adresse_mail_Client cannot be null!!");
                                        }
                                    }
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Numero_Telephone_Client"));
                                 
                                        if (localNumero_Telephone_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumero_Telephone_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Numero_Telephone_Client cannot be null!!");
                                        }
                                     if (localVIPTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "VIP"));
                            
                            
                                    elementList.add(localVIP==null?null:
                                    localVIP);
                                } if (localCateg_Ope_Niv1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Niv1"));
                                 
                                        if (localCateg_Ope_Niv1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Niv1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv1 cannot be null!!");
                                        }
                                    } if (localCateg_Ope_Niv2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Niv2"));
                                 
                                        if (localCateg_Ope_Niv2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Niv2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv2 cannot be null!!");
                                        }
                                    } if (localCateg_Ope_Niv3Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Niv3"));
                                 
                                        if (localCateg_Ope_Niv3 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Niv3));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv3 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Niv1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Niv1"));
                                 
                                        if (localCateg_Prod_Niv1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Niv1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv1 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Niv2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Niv2"));
                                 
                                        if (localCateg_Prod_Niv2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Niv2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv2 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Niv3Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Niv3"));
                                 
                                        if (localCateg_Prod_Niv3 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Niv3));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv3 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_ProduitTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Produit"));
                                 
                                        if (localCateg_Prod_Produit != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Produit));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Produit cannot be null!!");
                                        }
                                    } if (localCateg_Prod_ModeleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Modele"));
                                 
                                        if (localCateg_Prod_Modele != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Modele));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Modele cannot be null!!");
                                        }
                                    } if (localCateg_Prod_FabricantTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Fabricant"));
                                 
                                        if (localCateg_Prod_Fabricant != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Fabricant));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Fabricant cannot be null!!");
                                        }
                                    } if (localCateg_Ope_Resol_Niv1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Resol_Niv1"));
                                 
                                        if (localCateg_Ope_Resol_Niv1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Resol_Niv1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv1 cannot be null!!");
                                        }
                                    } if (localCateg_Ope_Resol_Niv2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Resol_Niv2"));
                                 
                                        if (localCateg_Ope_Resol_Niv2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Resol_Niv2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv2 cannot be null!!");
                                        }
                                    } if (localCateg_Ope_Resol_Niv3Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Resol_Niv3"));
                                 
                                        if (localCateg_Ope_Resol_Niv3 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Resol_Niv3));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv3 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_Niv1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Niv1"));
                                 
                                        if (localCateg_Prod_Resol_Niv1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Niv1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv1 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_Niv2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Niv2"));
                                 
                                        if (localCateg_Prod_Resol_Niv2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Niv2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv2 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_Niv3Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Niv3"));
                                 
                                        if (localCateg_Prod_Resol_Niv3 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Niv3));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv3 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_ProduitTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Produit"));
                                 
                                        if (localCateg_Prod_Resol_Produit != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Produit));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Produit cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_ModeleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Modele"));
                                 
                                        if (localCateg_Prod_Resol_Modele != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Modele));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Modele cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_FabricantTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Fabricant"));
                                 
                                        if (localCateg_Prod_Resol_Fabricant != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Fabricant));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Fabricant cannot be null!!");
                                        }
                                    } if (localSociete_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Societe_Contact"));
                                 
                                        if (localSociete_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSociete_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Societe_Contact cannot be null!!");
                                        }
                                    } if (localDepartement_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Departement_Contact"));
                                 
                                        if (localDepartement_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDepartement_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Departement_Contact cannot be null!!");
                                        }
                                    } if (localSite_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Site_Contact"));
                                 
                                        if (localSite_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSite_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Site_Contact cannot be null!!");
                                        }
                                    } if (localNom_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nom_Contact"));
                                 
                                        if (localNom_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNom_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Nom_Contact cannot be null!!");
                                        }
                                    } if (localPrenom_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Prenom_Contact"));
                                 
                                        if (localPrenom_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrenom_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Prenom_Contact cannot be null!!");
                                        }
                                    } if (localNumero_Telephone_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Numero_Telephone_Contact"));
                                 
                                        if (localNumero_Telephone_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumero_Telephone_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Numero_Telephone_Contact cannot be null!!");
                                        }
                                    } if (localAdresse_mail_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Adresse_mail_Contact"));
                                 
                                        if (localAdresse_mail_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAdresse_mail_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Adresse_mail_Contact cannot be null!!");
                                        }
                                    } if (localNb_RelanceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nb_Relance"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Relance));
                            } if (localAbsence_de_consigneTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Absence_de_consigne"));
                            
                            
                                    elementList.add(localAbsence_de_consigne==null?null:
                                    localAbsence_de_consigne);
                                } if (localAppel_astreinteTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Appel_astreinte"));
                            
                            
                                    elementList.add(localAppel_astreinte==null?null:
                                    localAppel_astreinte);
                                } if (localNb_Tickets_FilsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nb_Tickets_Fils"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Tickets_Fils));
                            } if (localEnvironnementTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Environnement"));
                            
                            
                                    elementList.add(localEnvironnement==null?null:
                                    localEnvironnement);
                                } if (localTicketSourceSignaleeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "TicketSourceSignalee"));
                                 
                                        if (localTicketSourceSignalee != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTicketSourceSignalee));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("TicketSourceSignalee cannot be null!!");
                                        }
                                    } if (localTraitePilotageTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "TraitePilotage"));
                            
                            
                                    elementList.add(localTraitePilotage==null?null:
                                    localTraitePilotage);
                                } if (localServiceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Service"));
                                 
                                        if (localService != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localService));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Service cannot be null!!");
                                        }
                                    } if (localHPD_CITracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "HPD_CI"));
                                 
                                        if (localHPD_CI != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHPD_CI));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("HPD_CI cannot be null!!");
                                        }
                                    } if (localServiceCITracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "ServiceCI"));
                                 
                                        if (localServiceCI != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServiceCI));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ServiceCI cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static GetListValues_type3 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            GetListValues_type3 object =
                new GetListValues_type3();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"getListValues_type3".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetListValues_type3)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Numero_Incident").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Numero_Incident" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumero_Incident(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Resume").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Resume" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setResume(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Remarques").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Remarques" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRemarques(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Createur").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Createur" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreateur(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_creation").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_creation" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_creation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_signalement").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_signalement" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_signalement(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Modifie_par").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Modifie_par" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifie_par(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_modification").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_modification" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_modification(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Etat").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Etat" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEtat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Motif_Etat").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Motif_Etat" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMotif_Etat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Source_signalee").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Source_signalee" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSource_signalee(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Type_incident").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Type_incident" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setType_incident(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Impact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Impact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setImpact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Urgence").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Urgence" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUrgence(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Priorite").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Priorite" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPriorite(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Groupe_Affecte").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Groupe_Affecte" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setGroupe_Affecte(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Intervenant").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Intervenant" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIntervenant(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Delai_resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Delai_resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDelai_resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Groupe_resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Groupe_resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setGroupe_resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setResolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Methode_Resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Methode_Resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMethode_Resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Type_Association_Incident").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setType_Association_Incident(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setType_Association_Incident(Type_Association_IncidentType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Societe_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Societe_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSociete_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Departement_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Departement_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDepartement_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Site_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Site_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSite_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Login_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Login_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogin_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nom_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nom_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNom_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Prenom_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Prenom_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrenom_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Adresse_mail_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Adresse_mail_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAdresse_mail_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Numero_Telephone_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Numero_Telephone_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumero_Telephone_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","VIP").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setVIP(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setVIP(VIPType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Niv1").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Niv1" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Niv1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Niv2").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Niv2" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Niv2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Niv3").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Niv3" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Niv3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Niv1").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Niv1" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Niv1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Niv2").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Niv2" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Niv2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Niv3").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Niv3" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Niv3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Produit").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Produit" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Produit(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Modele").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Modele" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Modele(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Fabricant").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Fabricant" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Fabricant(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Resol_Niv1").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Resol_Niv1" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Resol_Niv1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Resol_Niv2").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Resol_Niv2" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Resol_Niv2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Resol_Niv3").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Resol_Niv3" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Resol_Niv3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Niv1").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Niv1" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Niv1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Niv2").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Niv2" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Niv2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Niv3").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Niv3" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Niv3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Produit").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Produit" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Produit(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Modele").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Modele" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Modele(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Fabricant").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Fabricant" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Fabricant(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Societe_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Societe_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSociete_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Departement_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Departement_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDepartement_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Site_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Site_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSite_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nom_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nom_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNom_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Prenom_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Prenom_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrenom_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Numero_Telephone_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Numero_Telephone_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumero_Telephone_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Adresse_mail_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Adresse_mail_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAdresse_mail_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nb_Relance").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nb_Relance" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNb_Relance(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setNb_Relance(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Absence_de_consigne").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setAbsence_de_consigne(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setAbsence_de_consigne(Absence_de_consigneType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Appel_astreinte").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setAppel_astreinte(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setAppel_astreinte(Absence_de_consigneType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nb_Tickets_Fils").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nb_Tickets_Fils" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNb_Tickets_Fils(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setNb_Tickets_Fils(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Environnement").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setEnvironnement(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setEnvironnement(EnvironnementType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","TicketSourceSignalee").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"TicketSourceSignalee" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTicketSourceSignalee(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","TraitePilotage").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setTraitePilotage(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setTraitePilotage(Absence_de_consigneType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Service").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Service" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setService(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","HPD_CI").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"HPD_CI" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setHPD_CI(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","ServiceCI").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ServiceCI" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setServiceCI(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class Incident_QueryList_Light_Service
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "Incident_QueryList_Light_Service",
                "ns1");

            

                        /**
                        * field for Incident_QueryList_Light_Service
                        */

                        
                                    protected InputMapping10 localIncident_QueryList_Light_Service ;
                                

                           /**
                           * Auto generated getter method
                           * @return InputMapping10
                           */
                           public  InputMapping10 getIncident_QueryList_Light_Service(){
                               return localIncident_QueryList_Light_Service;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Incident_QueryList_Light_Service
                               */
                               public void setIncident_QueryList_Light_Service(InputMapping10 param){
                            
                                            this.localIncident_QueryList_Light_Service=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localIncident_QueryList_Light_Service==null){
                                   throw new org.apache.axis2.databinding.ADBException("Incident_QueryList_Light_Service cannot be null!");
                                 }
                                 localIncident_QueryList_Light_Service.serialize(MY_QNAME,xmlWriter);
                            

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localIncident_QueryList_Light_Service.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Incident_QueryList_Light_Service parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Incident_QueryList_Light_Service object =
                new Incident_QueryList_Light_Service();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Incident_QueryList_Light_Service").equals(reader.getName())){
                                
                                                object.setIncident_QueryList_Light_Service(InputMapping10.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class OutputMapping8
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = OutputMapping8
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for GetListValues
                        * This was an Array!
                        */

                        
                                    protected GetListValues_type3[] localGetListValues ;
                                

                           /**
                           * Auto generated getter method
                           * @return GetListValues_type3[]
                           */
                           public  GetListValues_type3[] getGetListValues(){
                               return localGetListValues;
                           }

                           
                        


                               
                              /**
                               * validate the array for GetListValues
                               */
                              protected void validateGetListValues(GetListValues_type3[] param){
                             
                              if ((param != null) && (param.length < 1)){
                                throw new java.lang.RuntimeException();
                              }
                              
                              }


                             /**
                              * Auto generated setter method
                              * @param param GetListValues
                              */
                              public void setGetListValues(GetListValues_type3[] param){
                              
                                   validateGetListValues(param);

                               
                                      this.localGetListValues=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param GetListValues_type3
                             */
                             public void addGetListValues(GetListValues_type3 param){
                                   if (localGetListValues == null){
                                   localGetListValues = new GetListValues_type3[]{};
                                   }

                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localGetListValues);
                               list.add(param);
                               this.localGetListValues =
                             (GetListValues_type3[])list.toArray(
                            new GetListValues_type3[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":OutputMapping8",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "OutputMapping8",
                           xmlWriter);
                   }

               
                   }
               
                                       if (localGetListValues!=null){
                                            for (int i = 0;i < localGetListValues.length;i++){
                                                if (localGetListValues[i] != null){
                                                 localGetListValues[i].serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                           throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                        
                                    }
                                 
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                             if (localGetListValues!=null) {
                                 for (int i = 0;i < localGetListValues.length;i++){

                                    if (localGetListValues[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                          "getListValues"));
                                         elementList.add(localGetListValues[i]);
                                    } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null !!");
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                    
                             }

                        

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static OutputMapping8 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            OutputMapping8 object =
                new OutputMapping8();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"OutputMapping8".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (OutputMapping8)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(GetListValues_type3.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues").equals(reader.getName())){
                                                                    list1.add(GetListValues_type3.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setGetListValues((GetListValues_type3[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                GetListValues_type3.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class AuthenticationInfo
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = AuthenticationInfo
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for UserName
                        */

                        
                                    protected java.lang.String localUserName ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUserName(){
                               return localUserName;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param UserName
                               */
                               public void setUserName(java.lang.String param){
                            
                                            this.localUserName=param;
                                    

                               }
                            

                        /**
                        * field for Password
                        */

                        
                                    protected java.lang.String localPassword ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPassword(){
                               return localPassword;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Password
                               */
                               public void setPassword(java.lang.String param){
                            
                                            this.localPassword=param;
                                    

                               }
                            

                        /**
                        * field for Authentication
                        */

                        
                                    protected java.lang.String localAuthentication ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAuthenticationTracker = false ;

                           public boolean isAuthenticationSpecified(){
                               return localAuthenticationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAuthentication(){
                               return localAuthentication;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Authentication
                               */
                               public void setAuthentication(java.lang.String param){
                            localAuthenticationTracker = param != null;
                                   
                                            this.localAuthentication=param;
                                    

                               }
                            

                        /**
                        * field for Locale
                        */

                        
                                    protected java.lang.String localLocale ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLocaleTracker = false ;

                           public boolean isLocaleSpecified(){
                               return localLocaleTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLocale(){
                               return localLocale;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Locale
                               */
                               public void setLocale(java.lang.String param){
                            localLocaleTracker = param != null;
                                   
                                            this.localLocale=param;
                                    

                               }
                            

                        /**
                        * field for TimeZone
                        */

                        
                                    protected java.lang.String localTimeZone ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTimeZoneTracker = false ;

                           public boolean isTimeZoneSpecified(){
                               return localTimeZoneTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTimeZone(){
                               return localTimeZone;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TimeZone
                               */
                               public void setTimeZone(java.lang.String param){
                            localTimeZoneTracker = param != null;
                                   
                                            this.localTimeZone=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":AuthenticationInfo",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "AuthenticationInfo",
                           xmlWriter);
                   }

               
                   }
               
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "userName", xmlWriter);
                             

                                          if (localUserName==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("userName cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUserName);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "password", xmlWriter);
                             

                                          if (localPassword==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("password cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPassword);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localAuthenticationTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "authentication", xmlWriter);
                             

                                          if (localAuthentication==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("authentication cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAuthentication);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLocaleTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "locale", xmlWriter);
                             

                                          if (localLocale==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("locale cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLocale);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTimeZoneTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "timeZone", xmlWriter);
                             

                                          if (localTimeZone==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("timeZone cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTimeZone);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "userName"));
                                 
                                        if (localUserName != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUserName));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("userName cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "password"));
                                 
                                        if (localPassword != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPassword));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("password cannot be null!!");
                                        }
                                     if (localAuthenticationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "authentication"));
                                 
                                        if (localAuthentication != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAuthentication));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("authentication cannot be null!!");
                                        }
                                    } if (localLocaleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "locale"));
                                 
                                        if (localLocale != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLocale));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("locale cannot be null!!");
                                        }
                                    } if (localTimeZoneTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "timeZone"));
                                 
                                        if (localTimeZone != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTimeZone));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("timeZone cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AuthenticationInfo parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AuthenticationInfo object =
                new AuthenticationInfo();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"AuthenticationInfo".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (AuthenticationInfo)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","userName").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"userName" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUserName(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","password").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"password" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPassword(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","authentication").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"authentication" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAuthentication(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","locale").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"locale" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLocale(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","timeZone").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"timeZone" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTimeZone(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class OutputMapping7
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = OutputMapping7
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for GetListValues
                        * This was an Array!
                        */

                        
                                    protected GetListValues_type1[] localGetListValues ;
                                

                           /**
                           * Auto generated getter method
                           * @return GetListValues_type1[]
                           */
                           public  GetListValues_type1[] getGetListValues(){
                               return localGetListValues;
                           }

                           
                        


                               
                              /**
                               * validate the array for GetListValues
                               */
                              protected void validateGetListValues(GetListValues_type1[] param){
                             
                              if ((param != null) && (param.length < 1)){
                                throw new java.lang.RuntimeException();
                              }
                              
                              }


                             /**
                              * Auto generated setter method
                              * @param param GetListValues
                              */
                              public void setGetListValues(GetListValues_type1[] param){
                              
                                   validateGetListValues(param);

                               
                                      this.localGetListValues=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param GetListValues_type1
                             */
                             public void addGetListValues(GetListValues_type1 param){
                                   if (localGetListValues == null){
                                   localGetListValues = new GetListValues_type1[]{};
                                   }

                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localGetListValues);
                               list.add(param);
                               this.localGetListValues =
                             (GetListValues_type1[])list.toArray(
                            new GetListValues_type1[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":OutputMapping7",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "OutputMapping7",
                           xmlWriter);
                   }

               
                   }
               
                                       if (localGetListValues!=null){
                                            for (int i = 0;i < localGetListValues.length;i++){
                                                if (localGetListValues[i] != null){
                                                 localGetListValues[i].serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                           throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                        
                                    }
                                 
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                             if (localGetListValues!=null) {
                                 for (int i = 0;i < localGetListValues.length;i++){

                                    if (localGetListValues[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                          "getListValues"));
                                         elementList.add(localGetListValues[i]);
                                    } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null !!");
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                    
                             }

                        

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static OutputMapping7 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            OutputMapping7 object =
                new OutputMapping7();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"OutputMapping7".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (OutputMapping7)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(GetListValues_type1.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues").equals(reader.getName())){
                                                                    list1.add(GetListValues_type1.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setGetListValues((GetListValues_type1[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                GetListValues_type1.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class GetListValues_type1
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = getListValues_type1
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Numero_Incident
                        */

                        
                                    protected java.lang.String localNumero_Incident ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumero_Incident(){
                               return localNumero_Incident;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Numero_Incident
                               */
                               public void setNumero_Incident(java.lang.String param){
                            
                                            this.localNumero_Incident=param;
                                    

                               }
                            

                        /**
                        * field for Resume
                        */

                        
                                    protected java.lang.String localResume ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getResume(){
                               return localResume;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Resume
                               */
                               public void setResume(java.lang.String param){
                            
                                            this.localResume=param;
                                    

                               }
                            

                        /**
                        * field for Remarques
                        */

                        
                                    protected java.lang.String localRemarques ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localRemarquesTracker = false ;

                           public boolean isRemarquesSpecified(){
                               return localRemarquesTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getRemarques(){
                               return localRemarques;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Remarques
                               */
                               public void setRemarques(java.lang.String param){
                            localRemarquesTracker = param != null;
                                   
                                            this.localRemarques=param;
                                    

                               }
                            

                        /**
                        * field for Createur
                        */

                        
                                    protected java.lang.String localCreateur ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCreateur(){
                               return localCreateur;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Createur
                               */
                               public void setCreateur(java.lang.String param){
                            
                                            this.localCreateur=param;
                                    

                               }
                            

                        /**
                        * field for Date_creation
                        */

                        
                                    protected java.util.Calendar localDate_creation ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_creationTracker = false ;

                           public boolean isDate_creationSpecified(){
                               return localDate_creationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_creation(){
                               return localDate_creation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_creation
                               */
                               public void setDate_creation(java.util.Calendar param){
                            localDate_creationTracker = param != null;
                                   
                                            this.localDate_creation=param;
                                    

                               }
                            

                        /**
                        * field for Date_signalement
                        */

                        
                                    protected java.util.Calendar localDate_signalement ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_signalementTracker = false ;

                           public boolean isDate_signalementSpecified(){
                               return localDate_signalementTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_signalement(){
                               return localDate_signalement;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_signalement
                               */
                               public void setDate_signalement(java.util.Calendar param){
                            localDate_signalementTracker = param != null;
                                   
                                            this.localDate_signalement=param;
                                    

                               }
                            

                        /**
                        * field for Modifie_par
                        */

                        
                                    protected java.lang.String localModifie_par ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifie_parTracker = false ;

                           public boolean isModifie_parSpecified(){
                               return localModifie_parTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifie_par(){
                               return localModifie_par;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Modifie_par
                               */
                               public void setModifie_par(java.lang.String param){
                            localModifie_parTracker = param != null;
                                   
                                            this.localModifie_par=param;
                                    

                               }
                            

                        /**
                        * field for Date_modification
                        */

                        
                                    protected java.util.Calendar localDate_modification ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_modificationTracker = false ;

                           public boolean isDate_modificationSpecified(){
                               return localDate_modificationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_modification(){
                               return localDate_modification;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_modification
                               */
                               public void setDate_modification(java.util.Calendar param){
                            localDate_modificationTracker = param != null;
                                   
                                            this.localDate_modification=param;
                                    

                               }
                            

                        /**
                        * field for Etat
                        */

                        
                                    protected java.lang.String localEtat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEtatTracker = false ;

                           public boolean isEtatSpecified(){
                               return localEtatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEtat(){
                               return localEtat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Etat
                               */
                               public void setEtat(java.lang.String param){
                            localEtatTracker = param != null;
                                   
                                            this.localEtat=param;
                                    

                               }
                            

                        /**
                        * field for Motif_Etat
                        */

                        
                                    protected java.lang.String localMotif_Etat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMotif_EtatTracker = false ;

                           public boolean isMotif_EtatSpecified(){
                               return localMotif_EtatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMotif_Etat(){
                               return localMotif_Etat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Motif_Etat
                               */
                               public void setMotif_Etat(java.lang.String param){
                            localMotif_EtatTracker = param != null;
                                   
                                            this.localMotif_Etat=param;
                                    

                               }
                            

                        /**
                        * field for Source_signalee
                        */

                        
                                    protected java.lang.String localSource_signalee ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSource_signaleeTracker = false ;

                           public boolean isSource_signaleeSpecified(){
                               return localSource_signaleeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSource_signalee(){
                               return localSource_signalee;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Source_signalee
                               */
                               public void setSource_signalee(java.lang.String param){
                            localSource_signaleeTracker = param != null;
                                   
                                            this.localSource_signalee=param;
                                    

                               }
                            

                        /**
                        * field for Type_incident
                        */

                        
                                    protected java.lang.String localType_incident ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localType_incidentTracker = false ;

                           public boolean isType_incidentSpecified(){
                               return localType_incidentTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getType_incident(){
                               return localType_incident;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Type_incident
                               */
                               public void setType_incident(java.lang.String param){
                            localType_incidentTracker = param != null;
                                   
                                            this.localType_incident=param;
                                    

                               }
                            

                        /**
                        * field for Impact
                        */

                        
                                    protected java.lang.String localImpact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localImpactTracker = false ;

                           public boolean isImpactSpecified(){
                               return localImpactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getImpact(){
                               return localImpact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Impact
                               */
                               public void setImpact(java.lang.String param){
                            localImpactTracker = param != null;
                                   
                                            this.localImpact=param;
                                    

                               }
                            

                        /**
                        * field for Urgence
                        */

                        
                                    protected java.lang.String localUrgence ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUrgenceTracker = false ;

                           public boolean isUrgenceSpecified(){
                               return localUrgenceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUrgence(){
                               return localUrgence;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Urgence
                               */
                               public void setUrgence(java.lang.String param){
                            localUrgenceTracker = param != null;
                                   
                                            this.localUrgence=param;
                                    

                               }
                            

                        /**
                        * field for Priorite
                        */

                        
                                    protected java.lang.String localPriorite ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrioriteTracker = false ;

                           public boolean isPrioriteSpecified(){
                               return localPrioriteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPriorite(){
                               return localPriorite;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Priorite
                               */
                               public void setPriorite(java.lang.String param){
                            localPrioriteTracker = param != null;
                                   
                                            this.localPriorite=param;
                                    

                               }
                            

                        /**
                        * field for Groupe_Affecte
                        */

                        
                                    protected java.lang.String localGroupe_Affecte ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localGroupe_AffecteTracker = false ;

                           public boolean isGroupe_AffecteSpecified(){
                               return localGroupe_AffecteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getGroupe_Affecte(){
                               return localGroupe_Affecte;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Groupe_Affecte
                               */
                               public void setGroupe_Affecte(java.lang.String param){
                            localGroupe_AffecteTracker = param != null;
                                   
                                            this.localGroupe_Affecte=param;
                                    

                               }
                            

                        /**
                        * field for Intervenant
                        */

                        
                                    protected java.lang.String localIntervenant ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIntervenantTracker = false ;

                           public boolean isIntervenantSpecified(){
                               return localIntervenantTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getIntervenant(){
                               return localIntervenant;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Intervenant
                               */
                               public void setIntervenant(java.lang.String param){
                            localIntervenantTracker = param != null;
                                   
                                            this.localIntervenant=param;
                                    

                               }
                            

                        /**
                        * field for Date_resolution
                        */

                        
                                    protected java.util.Calendar localDate_resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_resolutionTracker = false ;

                           public boolean isDate_resolutionSpecified(){
                               return localDate_resolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_resolution(){
                               return localDate_resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_resolution
                               */
                               public void setDate_resolution(java.util.Calendar param){
                            localDate_resolutionTracker = param != null;
                                   
                                            this.localDate_resolution=param;
                                    

                               }
                            

                        /**
                        * field for Delai_resolution
                        */

                        
                                    protected java.math.BigDecimal localDelai_resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDelai_resolutionTracker = false ;

                           public boolean isDelai_resolutionSpecified(){
                               return localDelai_resolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.math.BigDecimal
                           */
                           public  java.math.BigDecimal getDelai_resolution(){
                               return localDelai_resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Delai_resolution
                               */
                               public void setDelai_resolution(java.math.BigDecimal param){
                            localDelai_resolutionTracker = param != null;
                                   
                                            this.localDelai_resolution=param;
                                    

                               }
                            

                        /**
                        * field for Groupe_resolution
                        */

                        
                                    protected java.lang.String localGroupe_resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localGroupe_resolutionTracker = false ;

                           public boolean isGroupe_resolutionSpecified(){
                               return localGroupe_resolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getGroupe_resolution(){
                               return localGroupe_resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Groupe_resolution
                               */
                               public void setGroupe_resolution(java.lang.String param){
                            localGroupe_resolutionTracker = param != null;
                                   
                                            this.localGroupe_resolution=param;
                                    

                               }
                            

                        /**
                        * field for Resolution
                        */

                        
                                    protected java.lang.String localResolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localResolutionTracker = false ;

                           public boolean isResolutionSpecified(){
                               return localResolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getResolution(){
                               return localResolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Resolution
                               */
                               public void setResolution(java.lang.String param){
                            localResolutionTracker = param != null;
                                   
                                            this.localResolution=param;
                                    

                               }
                            

                        /**
                        * field for Methode_Resolution
                        */

                        
                                    protected java.lang.String localMethode_Resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMethode_ResolutionTracker = false ;

                           public boolean isMethode_ResolutionSpecified(){
                               return localMethode_ResolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMethode_Resolution(){
                               return localMethode_Resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Methode_Resolution
                               */
                               public void setMethode_Resolution(java.lang.String param){
                            localMethode_ResolutionTracker = param != null;
                                   
                                            this.localMethode_Resolution=param;
                                    

                               }
                            

                        /**
                        * field for Type_Association_Incident
                        */

                        
                                    protected Type_Association_IncidentType localType_Association_Incident ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localType_Association_IncidentTracker = false ;

                           public boolean isType_Association_IncidentSpecified(){
                               return localType_Association_IncidentTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return Type_Association_IncidentType
                           */
                           public  Type_Association_IncidentType getType_Association_Incident(){
                               return localType_Association_Incident;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Type_Association_Incident
                               */
                               public void setType_Association_Incident(Type_Association_IncidentType param){
                            localType_Association_IncidentTracker = true;
                                   
                                            this.localType_Association_Incident=param;
                                    

                               }
                            

                        /**
                        * field for Societe_Client
                        */

                        
                                    protected java.lang.String localSociete_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSociete_Client(){
                               return localSociete_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Societe_Client
                               */
                               public void setSociete_Client(java.lang.String param){
                            
                                            this.localSociete_Client=param;
                                    

                               }
                            

                        /**
                        * field for Departement_Client
                        */

                        
                                    protected java.lang.String localDepartement_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDepartement_Client(){
                               return localDepartement_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Departement_Client
                               */
                               public void setDepartement_Client(java.lang.String param){
                            
                                            this.localDepartement_Client=param;
                                    

                               }
                            

                        /**
                        * field for Site_Client
                        */

                        
                                    protected java.lang.String localSite_Client ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSite_ClientTracker = false ;

                           public boolean isSite_ClientSpecified(){
                               return localSite_ClientTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSite_Client(){
                               return localSite_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Site_Client
                               */
                               public void setSite_Client(java.lang.String param){
                            localSite_ClientTracker = param != null;
                                   
                                            this.localSite_Client=param;
                                    

                               }
                            

                        /**
                        * field for Login_Client
                        */

                        
                                    protected java.lang.String localLogin_Client ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogin_ClientTracker = false ;

                           public boolean isLogin_ClientSpecified(){
                               return localLogin_ClientTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogin_Client(){
                               return localLogin_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Login_Client
                               */
                               public void setLogin_Client(java.lang.String param){
                            localLogin_ClientTracker = param != null;
                                   
                                            this.localLogin_Client=param;
                                    

                               }
                            

                        /**
                        * field for Nom_Client
                        */

                        
                                    protected java.lang.String localNom_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNom_Client(){
                               return localNom_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nom_Client
                               */
                               public void setNom_Client(java.lang.String param){
                            
                                            this.localNom_Client=param;
                                    

                               }
                            

                        /**
                        * field for Prenom_Client
                        */

                        
                                    protected java.lang.String localPrenom_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrenom_Client(){
                               return localPrenom_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Prenom_Client
                               */
                               public void setPrenom_Client(java.lang.String param){
                            
                                            this.localPrenom_Client=param;
                                    

                               }
                            

                        /**
                        * field for Adresse_mail_Client
                        */

                        
                                    protected java.lang.String localAdresse_mail_Client ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAdresse_mail_ClientTracker = false ;

                           public boolean isAdresse_mail_ClientSpecified(){
                               return localAdresse_mail_ClientTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAdresse_mail_Client(){
                               return localAdresse_mail_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Adresse_mail_Client
                               */
                               public void setAdresse_mail_Client(java.lang.String param){
                            localAdresse_mail_ClientTracker = param != null;
                                   
                                            this.localAdresse_mail_Client=param;
                                    

                               }
                            

                        /**
                        * field for Numero_Telephone_Client
                        */

                        
                                    protected java.lang.String localNumero_Telephone_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumero_Telephone_Client(){
                               return localNumero_Telephone_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Numero_Telephone_Client
                               */
                               public void setNumero_Telephone_Client(java.lang.String param){
                            
                                            this.localNumero_Telephone_Client=param;
                                    

                               }
                            

                        /**
                        * field for VIP
                        */

                        
                                    protected VIPType localVIP ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localVIPTracker = false ;

                           public boolean isVIPSpecified(){
                               return localVIPTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return VIPType
                           */
                           public  VIPType getVIP(){
                               return localVIP;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param VIP
                               */
                               public void setVIP(VIPType param){
                            localVIPTracker = true;
                                   
                                            this.localVIP=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Niv1
                        */

                        
                                    protected java.lang.String localCateg_Ope_Niv1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Niv1Tracker = false ;

                           public boolean isCateg_Ope_Niv1Specified(){
                               return localCateg_Ope_Niv1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Niv1(){
                               return localCateg_Ope_Niv1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Niv1
                               */
                               public void setCateg_Ope_Niv1(java.lang.String param){
                            localCateg_Ope_Niv1Tracker = param != null;
                                   
                                            this.localCateg_Ope_Niv1=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Niv2
                        */

                        
                                    protected java.lang.String localCateg_Ope_Niv2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Niv2Tracker = false ;

                           public boolean isCateg_Ope_Niv2Specified(){
                               return localCateg_Ope_Niv2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Niv2(){
                               return localCateg_Ope_Niv2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Niv2
                               */
                               public void setCateg_Ope_Niv2(java.lang.String param){
                            localCateg_Ope_Niv2Tracker = param != null;
                                   
                                            this.localCateg_Ope_Niv2=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Niv3
                        */

                        
                                    protected java.lang.String localCateg_Ope_Niv3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Niv3Tracker = false ;

                           public boolean isCateg_Ope_Niv3Specified(){
                               return localCateg_Ope_Niv3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Niv3(){
                               return localCateg_Ope_Niv3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Niv3
                               */
                               public void setCateg_Ope_Niv3(java.lang.String param){
                            localCateg_Ope_Niv3Tracker = param != null;
                                   
                                            this.localCateg_Ope_Niv3=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Niv1
                        */

                        
                                    protected java.lang.String localCateg_Prod_Niv1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Niv1Tracker = false ;

                           public boolean isCateg_Prod_Niv1Specified(){
                               return localCateg_Prod_Niv1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Niv1(){
                               return localCateg_Prod_Niv1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Niv1
                               */
                               public void setCateg_Prod_Niv1(java.lang.String param){
                            localCateg_Prod_Niv1Tracker = param != null;
                                   
                                            this.localCateg_Prod_Niv1=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Niv2
                        */

                        
                                    protected java.lang.String localCateg_Prod_Niv2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Niv2Tracker = false ;

                           public boolean isCateg_Prod_Niv2Specified(){
                               return localCateg_Prod_Niv2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Niv2(){
                               return localCateg_Prod_Niv2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Niv2
                               */
                               public void setCateg_Prod_Niv2(java.lang.String param){
                            localCateg_Prod_Niv2Tracker = param != null;
                                   
                                            this.localCateg_Prod_Niv2=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Niv3
                        */

                        
                                    protected java.lang.String localCateg_Prod_Niv3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Niv3Tracker = false ;

                           public boolean isCateg_Prod_Niv3Specified(){
                               return localCateg_Prod_Niv3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Niv3(){
                               return localCateg_Prod_Niv3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Niv3
                               */
                               public void setCateg_Prod_Niv3(java.lang.String param){
                            localCateg_Prod_Niv3Tracker = param != null;
                                   
                                            this.localCateg_Prod_Niv3=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Produit
                        */

                        
                                    protected java.lang.String localCateg_Prod_Produit ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_ProduitTracker = false ;

                           public boolean isCateg_Prod_ProduitSpecified(){
                               return localCateg_Prod_ProduitTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Produit(){
                               return localCateg_Prod_Produit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Produit
                               */
                               public void setCateg_Prod_Produit(java.lang.String param){
                            localCateg_Prod_ProduitTracker = param != null;
                                   
                                            this.localCateg_Prod_Produit=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Modele
                        */

                        
                                    protected java.lang.String localCateg_Prod_Modele ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_ModeleTracker = false ;

                           public boolean isCateg_Prod_ModeleSpecified(){
                               return localCateg_Prod_ModeleTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Modele(){
                               return localCateg_Prod_Modele;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Modele
                               */
                               public void setCateg_Prod_Modele(java.lang.String param){
                            localCateg_Prod_ModeleTracker = param != null;
                                   
                                            this.localCateg_Prod_Modele=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Fabricant
                        */

                        
                                    protected java.lang.String localCateg_Prod_Fabricant ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_FabricantTracker = false ;

                           public boolean isCateg_Prod_FabricantSpecified(){
                               return localCateg_Prod_FabricantTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Fabricant(){
                               return localCateg_Prod_Fabricant;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Fabricant
                               */
                               public void setCateg_Prod_Fabricant(java.lang.String param){
                            localCateg_Prod_FabricantTracker = param != null;
                                   
                                            this.localCateg_Prod_Fabricant=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Resol_Niv1
                        */

                        
                                    protected java.lang.String localCateg_Ope_Resol_Niv1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Resol_Niv1Tracker = false ;

                           public boolean isCateg_Ope_Resol_Niv1Specified(){
                               return localCateg_Ope_Resol_Niv1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Resol_Niv1(){
                               return localCateg_Ope_Resol_Niv1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Resol_Niv1
                               */
                               public void setCateg_Ope_Resol_Niv1(java.lang.String param){
                            localCateg_Ope_Resol_Niv1Tracker = param != null;
                                   
                                            this.localCateg_Ope_Resol_Niv1=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Resol_Niv2
                        */

                        
                                    protected java.lang.String localCateg_Ope_Resol_Niv2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Resol_Niv2Tracker = false ;

                           public boolean isCateg_Ope_Resol_Niv2Specified(){
                               return localCateg_Ope_Resol_Niv2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Resol_Niv2(){
                               return localCateg_Ope_Resol_Niv2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Resol_Niv2
                               */
                               public void setCateg_Ope_Resol_Niv2(java.lang.String param){
                            localCateg_Ope_Resol_Niv2Tracker = param != null;
                                   
                                            this.localCateg_Ope_Resol_Niv2=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Ope_Resol_Niv3
                        */

                        
                                    protected java.lang.String localCateg_Ope_Resol_Niv3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Ope_Resol_Niv3Tracker = false ;

                           public boolean isCateg_Ope_Resol_Niv3Specified(){
                               return localCateg_Ope_Resol_Niv3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Ope_Resol_Niv3(){
                               return localCateg_Ope_Resol_Niv3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Ope_Resol_Niv3
                               */
                               public void setCateg_Ope_Resol_Niv3(java.lang.String param){
                            localCateg_Ope_Resol_Niv3Tracker = param != null;
                                   
                                            this.localCateg_Ope_Resol_Niv3=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Niv1
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Niv1 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_Niv1Tracker = false ;

                           public boolean isCateg_Prod_Resol_Niv1Specified(){
                               return localCateg_Prod_Resol_Niv1Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Niv1(){
                               return localCateg_Prod_Resol_Niv1;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Niv1
                               */
                               public void setCateg_Prod_Resol_Niv1(java.lang.String param){
                            localCateg_Prod_Resol_Niv1Tracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Niv1=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Niv2
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Niv2 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_Niv2Tracker = false ;

                           public boolean isCateg_Prod_Resol_Niv2Specified(){
                               return localCateg_Prod_Resol_Niv2Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Niv2(){
                               return localCateg_Prod_Resol_Niv2;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Niv2
                               */
                               public void setCateg_Prod_Resol_Niv2(java.lang.String param){
                            localCateg_Prod_Resol_Niv2Tracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Niv2=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Niv3
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Niv3 ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_Niv3Tracker = false ;

                           public boolean isCateg_Prod_Resol_Niv3Specified(){
                               return localCateg_Prod_Resol_Niv3Tracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Niv3(){
                               return localCateg_Prod_Resol_Niv3;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Niv3
                               */
                               public void setCateg_Prod_Resol_Niv3(java.lang.String param){
                            localCateg_Prod_Resol_Niv3Tracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Niv3=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Produit
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Produit ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_ProduitTracker = false ;

                           public boolean isCateg_Prod_Resol_ProduitSpecified(){
                               return localCateg_Prod_Resol_ProduitTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Produit(){
                               return localCateg_Prod_Resol_Produit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Produit
                               */
                               public void setCateg_Prod_Resol_Produit(java.lang.String param){
                            localCateg_Prod_Resol_ProduitTracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Produit=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Modele
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Modele ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_ModeleTracker = false ;

                           public boolean isCateg_Prod_Resol_ModeleSpecified(){
                               return localCateg_Prod_Resol_ModeleTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Modele(){
                               return localCateg_Prod_Resol_Modele;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Modele
                               */
                               public void setCateg_Prod_Resol_Modele(java.lang.String param){
                            localCateg_Prod_Resol_ModeleTracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Modele=param;
                                    

                               }
                            

                        /**
                        * field for Categ_Prod_Resol_Fabricant
                        */

                        
                                    protected java.lang.String localCateg_Prod_Resol_Fabricant ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localCateg_Prod_Resol_FabricantTracker = false ;

                           public boolean isCateg_Prod_Resol_FabricantSpecified(){
                               return localCateg_Prod_Resol_FabricantTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getCateg_Prod_Resol_Fabricant(){
                               return localCateg_Prod_Resol_Fabricant;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Categ_Prod_Resol_Fabricant
                               */
                               public void setCateg_Prod_Resol_Fabricant(java.lang.String param){
                            localCateg_Prod_Resol_FabricantTracker = param != null;
                                   
                                            this.localCateg_Prod_Resol_Fabricant=param;
                                    

                               }
                            

                        /**
                        * field for Societe_Contact
                        */

                        
                                    protected java.lang.String localSociete_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSociete_ContactTracker = false ;

                           public boolean isSociete_ContactSpecified(){
                               return localSociete_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSociete_Contact(){
                               return localSociete_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Societe_Contact
                               */
                               public void setSociete_Contact(java.lang.String param){
                            localSociete_ContactTracker = param != null;
                                   
                                            this.localSociete_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Departement_Contact
                        */

                        
                                    protected java.lang.String localDepartement_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDepartement_ContactTracker = false ;

                           public boolean isDepartement_ContactSpecified(){
                               return localDepartement_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getDepartement_Contact(){
                               return localDepartement_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Departement_Contact
                               */
                               public void setDepartement_Contact(java.lang.String param){
                            localDepartement_ContactTracker = param != null;
                                   
                                            this.localDepartement_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Site_Contact
                        */

                        
                                    protected java.lang.String localSite_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSite_ContactTracker = false ;

                           public boolean isSite_ContactSpecified(){
                               return localSite_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSite_Contact(){
                               return localSite_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Site_Contact
                               */
                               public void setSite_Contact(java.lang.String param){
                            localSite_ContactTracker = param != null;
                                   
                                            this.localSite_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Nom_Contact
                        */

                        
                                    protected java.lang.String localNom_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNom_ContactTracker = false ;

                           public boolean isNom_ContactSpecified(){
                               return localNom_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNom_Contact(){
                               return localNom_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nom_Contact
                               */
                               public void setNom_Contact(java.lang.String param){
                            localNom_ContactTracker = param != null;
                                   
                                            this.localNom_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Prenom_Contact
                        */

                        
                                    protected java.lang.String localPrenom_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrenom_ContactTracker = false ;

                           public boolean isPrenom_ContactSpecified(){
                               return localPrenom_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrenom_Contact(){
                               return localPrenom_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Prenom_Contact
                               */
                               public void setPrenom_Contact(java.lang.String param){
                            localPrenom_ContactTracker = param != null;
                                   
                                            this.localPrenom_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Numero_Telephone_Contact
                        */

                        
                                    protected java.lang.String localNumero_Telephone_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNumero_Telephone_ContactTracker = false ;

                           public boolean isNumero_Telephone_ContactSpecified(){
                               return localNumero_Telephone_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumero_Telephone_Contact(){
                               return localNumero_Telephone_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Numero_Telephone_Contact
                               */
                               public void setNumero_Telephone_Contact(java.lang.String param){
                            localNumero_Telephone_ContactTracker = param != null;
                                   
                                            this.localNumero_Telephone_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Adresse_mail_Contact
                        */

                        
                                    protected java.lang.String localAdresse_mail_Contact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAdresse_mail_ContactTracker = false ;

                           public boolean isAdresse_mail_ContactSpecified(){
                               return localAdresse_mail_ContactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getAdresse_mail_Contact(){
                               return localAdresse_mail_Contact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Adresse_mail_Contact
                               */
                               public void setAdresse_mail_Contact(java.lang.String param){
                            localAdresse_mail_ContactTracker = param != null;
                                   
                                            this.localAdresse_mail_Contact=param;
                                    

                               }
                            

                        /**
                        * field for Nb_Relance
                        */

                        
                                    protected int localNb_Relance =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("0");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNb_RelanceTracker = false ;

                           public boolean isNb_RelanceSpecified(){
                               return localNb_RelanceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getNb_Relance(){
                               return localNb_Relance;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nb_Relance
                               */
                               public void setNb_Relance(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localNb_RelanceTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localNb_Relance=param;
                                    

                               }
                            

                        /**
                        * field for Absence_de_consigne
                        */

                        
                                    protected Absence_de_consigneType localAbsence_de_consigne ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAbsence_de_consigneTracker = false ;

                           public boolean isAbsence_de_consigneSpecified(){
                               return localAbsence_de_consigneTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return Absence_de_consigneType
                           */
                           public  Absence_de_consigneType getAbsence_de_consigne(){
                               return localAbsence_de_consigne;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Absence_de_consigne
                               */
                               public void setAbsence_de_consigne(Absence_de_consigneType param){
                            localAbsence_de_consigneTracker = true;
                                   
                                            this.localAbsence_de_consigne=param;
                                    

                               }
                            

                        /**
                        * field for Appel_astreinte
                        */

                        
                                    protected Absence_de_consigneType localAppel_astreinte ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localAppel_astreinteTracker = false ;

                           public boolean isAppel_astreinteSpecified(){
                               return localAppel_astreinteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return Absence_de_consigneType
                           */
                           public  Absence_de_consigneType getAppel_astreinte(){
                               return localAppel_astreinte;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Appel_astreinte
                               */
                               public void setAppel_astreinte(Absence_de_consigneType param){
                            localAppel_astreinteTracker = true;
                                   
                                            this.localAppel_astreinte=param;
                                    

                               }
                            

                        /**
                        * field for Nb_Tickets_Fils
                        */

                        
                                    protected int localNb_Tickets_Fils =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("0");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNb_Tickets_FilsTracker = false ;

                           public boolean isNb_Tickets_FilsSpecified(){
                               return localNb_Tickets_FilsTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getNb_Tickets_Fils(){
                               return localNb_Tickets_Fils;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nb_Tickets_Fils
                               */
                               public void setNb_Tickets_Fils(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localNb_Tickets_FilsTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localNb_Tickets_Fils=param;
                                    

                               }
                            

                        /**
                        * field for Environnement
                        */

                        
                                    protected EnvironnementType localEnvironnement ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnvironnementTracker = false ;

                           public boolean isEnvironnementSpecified(){
                               return localEnvironnementTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return EnvironnementType
                           */
                           public  EnvironnementType getEnvironnement(){
                               return localEnvironnement;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Environnement
                               */
                               public void setEnvironnement(EnvironnementType param){
                            localEnvironnementTracker = true;
                                   
                                            this.localEnvironnement=param;
                                    

                               }
                            

                        /**
                        * field for TicketSourceSignalee
                        */

                        
                                    protected java.lang.String localTicketSourceSignalee ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTicketSourceSignaleeTracker = false ;

                           public boolean isTicketSourceSignaleeSpecified(){
                               return localTicketSourceSignaleeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTicketSourceSignalee(){
                               return localTicketSourceSignalee;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TicketSourceSignalee
                               */
                               public void setTicketSourceSignalee(java.lang.String param){
                            localTicketSourceSignaleeTracker = param != null;
                                   
                                            this.localTicketSourceSignalee=param;
                                    

                               }
                            

                        /**
                        * field for TraitePilotage
                        */

                        
                                    protected Absence_de_consigneType localTraitePilotage ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTraitePilotageTracker = false ;

                           public boolean isTraitePilotageSpecified(){
                               return localTraitePilotageTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return Absence_de_consigneType
                           */
                           public  Absence_de_consigneType getTraitePilotage(){
                               return localTraitePilotage;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TraitePilotage
                               */
                               public void setTraitePilotage(Absence_de_consigneType param){
                            localTraitePilotageTracker = true;
                                   
                                            this.localTraitePilotage=param;
                                    

                               }
                            

                        /**
                        * field for Service
                        */

                        
                                    protected java.lang.String localService ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localServiceTracker = false ;

                           public boolean isServiceSpecified(){
                               return localServiceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getService(){
                               return localService;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Service
                               */
                               public void setService(java.lang.String param){
                            localServiceTracker = param != null;
                                   
                                            this.localService=param;
                                    

                               }
                            

                        /**
                        * field for HPD_CI
                        */

                        
                                    protected java.lang.String localHPD_CI ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localHPD_CITracker = false ;

                           public boolean isHPD_CISpecified(){
                               return localHPD_CITracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getHPD_CI(){
                               return localHPD_CI;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param HPD_CI
                               */
                               public void setHPD_CI(java.lang.String param){
                            localHPD_CITracker = param != null;
                                   
                                            this.localHPD_CI=param;
                                    

                               }
                            

                        /**
                        * field for ServiceCI
                        */

                        
                                    protected java.lang.String localServiceCI ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localServiceCITracker = false ;

                           public boolean isServiceCISpecified(){
                               return localServiceCITracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getServiceCI(){
                               return localServiceCI;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param ServiceCI
                               */
                               public void setServiceCI(java.lang.String param){
                            localServiceCITracker = param != null;
                                   
                                            this.localServiceCI=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":getListValues_type1",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "getListValues_type1",
                           xmlWriter);
                   }

               
                   }
               
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Numero_Incident", xmlWriter);
                             

                                          if (localNumero_Incident==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Numero_Incident cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumero_Incident);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Resume", xmlWriter);
                             

                                          if (localResume==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Resume cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localResume);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localRemarquesTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Remarques", xmlWriter);
                             

                                          if (localRemarques==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Remarques cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localRemarques);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Createur", xmlWriter);
                             

                                          if (localCreateur==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Createur cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCreateur);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localDate_creationTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_creation", xmlWriter);
                             

                                          if (localDate_creation==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_creation cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_creation));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_signalementTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_signalement", xmlWriter);
                             

                                          if (localDate_signalement==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_signalement cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_signalement));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifie_parTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Modifie_par", xmlWriter);
                             

                                          if (localModifie_par==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Modifie_par cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifie_par);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_modificationTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_modification", xmlWriter);
                             

                                          if (localDate_modification==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_modification cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_modification));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEtatTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Etat", xmlWriter);
                             

                                          if (localEtat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Etat cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEtat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMotif_EtatTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Motif_Etat", xmlWriter);
                             

                                          if (localMotif_Etat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Motif_Etat cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMotif_Etat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSource_signaleeTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Source_signalee", xmlWriter);
                             

                                          if (localSource_signalee==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Source_signalee cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSource_signalee);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localType_incidentTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Type_incident", xmlWriter);
                             

                                          if (localType_incident==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Type_incident cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localType_incident);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localImpactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Impact", xmlWriter);
                             

                                          if (localImpact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Impact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localImpact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUrgenceTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Urgence", xmlWriter);
                             

                                          if (localUrgence==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Urgence cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUrgence);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPrioriteTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Priorite", xmlWriter);
                             

                                          if (localPriorite==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Priorite cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPriorite);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localGroupe_AffecteTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Groupe_Affecte", xmlWriter);
                             

                                          if (localGroupe_Affecte==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Groupe_Affecte cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localGroupe_Affecte);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIntervenantTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Intervenant", xmlWriter);
                             

                                          if (localIntervenant==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Intervenant cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localIntervenant);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_resolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_resolution", xmlWriter);
                             

                                          if (localDate_resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_resolution));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDelai_resolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Delai_resolution", xmlWriter);
                             

                                          if (localDelai_resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Delai_resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDelai_resolution));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localGroupe_resolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Groupe_resolution", xmlWriter);
                             

                                          if (localGroupe_resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Groupe_resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localGroupe_resolution);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localResolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Resolution", xmlWriter);
                             

                                          if (localResolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localResolution);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMethode_ResolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Methode_Resolution", xmlWriter);
                             

                                          if (localMethode_Resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Methode_Resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMethode_Resolution);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localType_Association_IncidentTracker){
                                    if (localType_Association_Incident==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "Type_Association_Incident", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localType_Association_Incident.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Type_Association_Incident"),
                                        xmlWriter);
                                    }
                                }
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Societe_Client", xmlWriter);
                             

                                          if (localSociete_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Societe_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSociete_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Departement_Client", xmlWriter);
                             

                                          if (localDepartement_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Departement_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDepartement_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localSite_ClientTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Site_Client", xmlWriter);
                             

                                          if (localSite_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Site_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSite_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogin_ClientTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Login_Client", xmlWriter);
                             

                                          if (localLogin_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Login_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogin_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nom_Client", xmlWriter);
                             

                                          if (localNom_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Nom_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNom_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Prenom_Client", xmlWriter);
                             

                                          if (localPrenom_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Prenom_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrenom_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localAdresse_mail_ClientTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Adresse_mail_Client", xmlWriter);
                             

                                          if (localAdresse_mail_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Adresse_mail_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAdresse_mail_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Numero_Telephone_Client", xmlWriter);
                             

                                          if (localNumero_Telephone_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Numero_Telephone_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumero_Telephone_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localVIPTracker){
                                    if (localVIP==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "VIP", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localVIP.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","VIP"),
                                        xmlWriter);
                                    }
                                } if (localCateg_Ope_Niv1Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Niv1", xmlWriter);
                             

                                          if (localCateg_Ope_Niv1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Niv1);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Ope_Niv2Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Niv2", xmlWriter);
                             

                                          if (localCateg_Ope_Niv2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Niv2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Ope_Niv3Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Niv3", xmlWriter);
                             

                                          if (localCateg_Ope_Niv3==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv3 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Niv3);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Niv1Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Niv1", xmlWriter);
                             

                                          if (localCateg_Prod_Niv1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Niv1);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Niv2Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Niv2", xmlWriter);
                             

                                          if (localCateg_Prod_Niv2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Niv2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Niv3Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Niv3", xmlWriter);
                             

                                          if (localCateg_Prod_Niv3==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv3 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Niv3);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_ProduitTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Produit", xmlWriter);
                             

                                          if (localCateg_Prod_Produit==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Produit cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Produit);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_ModeleTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Modele", xmlWriter);
                             

                                          if (localCateg_Prod_Modele==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Modele cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Modele);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_FabricantTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Fabricant", xmlWriter);
                             

                                          if (localCateg_Prod_Fabricant==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Fabricant cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Fabricant);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Ope_Resol_Niv1Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Resol_Niv1", xmlWriter);
                             

                                          if (localCateg_Ope_Resol_Niv1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Resol_Niv1);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Ope_Resol_Niv2Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Resol_Niv2", xmlWriter);
                             

                                          if (localCateg_Ope_Resol_Niv2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Resol_Niv2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Ope_Resol_Niv3Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Ope_Resol_Niv3", xmlWriter);
                             

                                          if (localCateg_Ope_Resol_Niv3==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv3 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Ope_Resol_Niv3);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_Niv1Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Niv1", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Niv1==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv1 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Niv1);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_Niv2Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Niv2", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Niv2==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv2 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Niv2);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_Niv3Tracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Niv3", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Niv3==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv3 cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Niv3);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_ProduitTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Produit", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Produit==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Produit cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Produit);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_ModeleTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Modele", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Modele==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Modele cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Modele);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localCateg_Prod_Resol_FabricantTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Categ_Prod_Resol_Fabricant", xmlWriter);
                             

                                          if (localCateg_Prod_Resol_Fabricant==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Fabricant cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localCateg_Prod_Resol_Fabricant);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSociete_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Societe_Contact", xmlWriter);
                             

                                          if (localSociete_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Societe_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSociete_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDepartement_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Departement_Contact", xmlWriter);
                             

                                          if (localDepartement_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Departement_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localDepartement_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSite_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Site_Contact", xmlWriter);
                             

                                          if (localSite_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Site_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSite_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNom_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nom_Contact", xmlWriter);
                             

                                          if (localNom_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Nom_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNom_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPrenom_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Prenom_Contact", xmlWriter);
                             

                                          if (localPrenom_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Prenom_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrenom_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNumero_Telephone_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Numero_Telephone_Contact", xmlWriter);
                             

                                          if (localNumero_Telephone_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Numero_Telephone_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumero_Telephone_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAdresse_mail_ContactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Adresse_mail_Contact", xmlWriter);
                             

                                          if (localAdresse_mail_Contact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Adresse_mail_Contact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localAdresse_mail_Contact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localNb_RelanceTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nb_Relance", xmlWriter);
                             
                                               if (localNb_Relance==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Nb_Relance cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Relance));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localAbsence_de_consigneTracker){
                                    if (localAbsence_de_consigne==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "Absence_de_consigne", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localAbsence_de_consigne.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Absence_de_consigne"),
                                        xmlWriter);
                                    }
                                } if (localAppel_astreinteTracker){
                                    if (localAppel_astreinte==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "Appel_astreinte", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localAppel_astreinte.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Appel_astreinte"),
                                        xmlWriter);
                                    }
                                } if (localNb_Tickets_FilsTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nb_Tickets_Fils", xmlWriter);
                             
                                               if (localNb_Tickets_Fils==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Nb_Tickets_Fils cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Tickets_Fils));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnvironnementTracker){
                                    if (localEnvironnement==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "Environnement", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localEnvironnement.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Environnement"),
                                        xmlWriter);
                                    }
                                } if (localTicketSourceSignaleeTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "TicketSourceSignalee", xmlWriter);
                             

                                          if (localTicketSourceSignalee==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("TicketSourceSignalee cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTicketSourceSignalee);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localTraitePilotageTracker){
                                    if (localTraitePilotage==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "TraitePilotage", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localTraitePilotage.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","TraitePilotage"),
                                        xmlWriter);
                                    }
                                } if (localServiceTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Service", xmlWriter);
                             

                                          if (localService==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Service cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localService);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localHPD_CITracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "HPD_CI", xmlWriter);
                             

                                          if (localHPD_CI==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("HPD_CI cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localHPD_CI);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localServiceCITracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "ServiceCI", xmlWriter);
                             

                                          if (localServiceCI==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("ServiceCI cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localServiceCI);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Numero_Incident"));
                                 
                                        if (localNumero_Incident != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumero_Incident));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Numero_Incident cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Resume"));
                                 
                                        if (localResume != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResume));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Resume cannot be null!!");
                                        }
                                     if (localRemarquesTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Remarques"));
                                 
                                        if (localRemarques != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localRemarques));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Remarques cannot be null!!");
                                        }
                                    }
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Createur"));
                                 
                                        if (localCreateur != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCreateur));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Createur cannot be null!!");
                                        }
                                     if (localDate_creationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_creation"));
                                 
                                        if (localDate_creation != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_creation));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_creation cannot be null!!");
                                        }
                                    } if (localDate_signalementTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_signalement"));
                                 
                                        if (localDate_signalement != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_signalement));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_signalement cannot be null!!");
                                        }
                                    } if (localModifie_parTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Modifie_par"));
                                 
                                        if (localModifie_par != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifie_par));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Modifie_par cannot be null!!");
                                        }
                                    } if (localDate_modificationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_modification"));
                                 
                                        if (localDate_modification != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_modification));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_modification cannot be null!!");
                                        }
                                    } if (localEtatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Etat"));
                                 
                                        if (localEtat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEtat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Etat cannot be null!!");
                                        }
                                    } if (localMotif_EtatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Motif_Etat"));
                                 
                                        if (localMotif_Etat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMotif_Etat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Motif_Etat cannot be null!!");
                                        }
                                    } if (localSource_signaleeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Source_signalee"));
                                 
                                        if (localSource_signalee != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSource_signalee));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Source_signalee cannot be null!!");
                                        }
                                    } if (localType_incidentTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Type_incident"));
                                 
                                        if (localType_incident != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localType_incident));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Type_incident cannot be null!!");
                                        }
                                    } if (localImpactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Impact"));
                                 
                                        if (localImpact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImpact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Impact cannot be null!!");
                                        }
                                    } if (localUrgenceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Urgence"));
                                 
                                        if (localUrgence != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUrgence));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Urgence cannot be null!!");
                                        }
                                    } if (localPrioriteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Priorite"));
                                 
                                        if (localPriorite != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPriorite));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Priorite cannot be null!!");
                                        }
                                    } if (localGroupe_AffecteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Groupe_Affecte"));
                                 
                                        if (localGroupe_Affecte != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGroupe_Affecte));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Groupe_Affecte cannot be null!!");
                                        }
                                    } if (localIntervenantTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Intervenant"));
                                 
                                        if (localIntervenant != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIntervenant));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Intervenant cannot be null!!");
                                        }
                                    } if (localDate_resolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_resolution"));
                                 
                                        if (localDate_resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_resolution cannot be null!!");
                                        }
                                    } if (localDelai_resolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Delai_resolution"));
                                 
                                        if (localDelai_resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDelai_resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Delai_resolution cannot be null!!");
                                        }
                                    } if (localGroupe_resolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Groupe_resolution"));
                                 
                                        if (localGroupe_resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGroupe_resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Groupe_resolution cannot be null!!");
                                        }
                                    } if (localResolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Resolution"));
                                 
                                        if (localResolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Resolution cannot be null!!");
                                        }
                                    } if (localMethode_ResolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Methode_Resolution"));
                                 
                                        if (localMethode_Resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMethode_Resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Methode_Resolution cannot be null!!");
                                        }
                                    } if (localType_Association_IncidentTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Type_Association_Incident"));
                            
                            
                                    elementList.add(localType_Association_Incident==null?null:
                                    localType_Association_Incident);
                                }
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Societe_Client"));
                                 
                                        if (localSociete_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSociete_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Societe_Client cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Departement_Client"));
                                 
                                        if (localDepartement_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDepartement_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Departement_Client cannot be null!!");
                                        }
                                     if (localSite_ClientTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Site_Client"));
                                 
                                        if (localSite_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSite_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Site_Client cannot be null!!");
                                        }
                                    } if (localLogin_ClientTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Login_Client"));
                                 
                                        if (localLogin_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogin_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Login_Client cannot be null!!");
                                        }
                                    }
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nom_Client"));
                                 
                                        if (localNom_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNom_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Nom_Client cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Prenom_Client"));
                                 
                                        if (localPrenom_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrenom_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Prenom_Client cannot be null!!");
                                        }
                                     if (localAdresse_mail_ClientTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Adresse_mail_Client"));
                                 
                                        if (localAdresse_mail_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAdresse_mail_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Adresse_mail_Client cannot be null!!");
                                        }
                                    }
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Numero_Telephone_Client"));
                                 
                                        if (localNumero_Telephone_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumero_Telephone_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Numero_Telephone_Client cannot be null!!");
                                        }
                                     if (localVIPTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "VIP"));
                            
                            
                                    elementList.add(localVIP==null?null:
                                    localVIP);
                                } if (localCateg_Ope_Niv1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Niv1"));
                                 
                                        if (localCateg_Ope_Niv1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Niv1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv1 cannot be null!!");
                                        }
                                    } if (localCateg_Ope_Niv2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Niv2"));
                                 
                                        if (localCateg_Ope_Niv2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Niv2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv2 cannot be null!!");
                                        }
                                    } if (localCateg_Ope_Niv3Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Niv3"));
                                 
                                        if (localCateg_Ope_Niv3 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Niv3));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Niv3 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Niv1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Niv1"));
                                 
                                        if (localCateg_Prod_Niv1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Niv1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv1 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Niv2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Niv2"));
                                 
                                        if (localCateg_Prod_Niv2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Niv2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv2 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Niv3Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Niv3"));
                                 
                                        if (localCateg_Prod_Niv3 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Niv3));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Niv3 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_ProduitTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Produit"));
                                 
                                        if (localCateg_Prod_Produit != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Produit));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Produit cannot be null!!");
                                        }
                                    } if (localCateg_Prod_ModeleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Modele"));
                                 
                                        if (localCateg_Prod_Modele != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Modele));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Modele cannot be null!!");
                                        }
                                    } if (localCateg_Prod_FabricantTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Fabricant"));
                                 
                                        if (localCateg_Prod_Fabricant != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Fabricant));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Fabricant cannot be null!!");
                                        }
                                    } if (localCateg_Ope_Resol_Niv1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Resol_Niv1"));
                                 
                                        if (localCateg_Ope_Resol_Niv1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Resol_Niv1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv1 cannot be null!!");
                                        }
                                    } if (localCateg_Ope_Resol_Niv2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Resol_Niv2"));
                                 
                                        if (localCateg_Ope_Resol_Niv2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Resol_Niv2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv2 cannot be null!!");
                                        }
                                    } if (localCateg_Ope_Resol_Niv3Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Ope_Resol_Niv3"));
                                 
                                        if (localCateg_Ope_Resol_Niv3 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Ope_Resol_Niv3));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Ope_Resol_Niv3 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_Niv1Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Niv1"));
                                 
                                        if (localCateg_Prod_Resol_Niv1 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Niv1));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv1 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_Niv2Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Niv2"));
                                 
                                        if (localCateg_Prod_Resol_Niv2 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Niv2));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv2 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_Niv3Tracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Niv3"));
                                 
                                        if (localCateg_Prod_Resol_Niv3 != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Niv3));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Niv3 cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_ProduitTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Produit"));
                                 
                                        if (localCateg_Prod_Resol_Produit != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Produit));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Produit cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_ModeleTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Modele"));
                                 
                                        if (localCateg_Prod_Resol_Modele != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Modele));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Modele cannot be null!!");
                                        }
                                    } if (localCateg_Prod_Resol_FabricantTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Categ_Prod_Resol_Fabricant"));
                                 
                                        if (localCateg_Prod_Resol_Fabricant != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCateg_Prod_Resol_Fabricant));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Categ_Prod_Resol_Fabricant cannot be null!!");
                                        }
                                    } if (localSociete_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Societe_Contact"));
                                 
                                        if (localSociete_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSociete_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Societe_Contact cannot be null!!");
                                        }
                                    } if (localDepartement_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Departement_Contact"));
                                 
                                        if (localDepartement_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDepartement_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Departement_Contact cannot be null!!");
                                        }
                                    } if (localSite_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Site_Contact"));
                                 
                                        if (localSite_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSite_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Site_Contact cannot be null!!");
                                        }
                                    } if (localNom_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nom_Contact"));
                                 
                                        if (localNom_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNom_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Nom_Contact cannot be null!!");
                                        }
                                    } if (localPrenom_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Prenom_Contact"));
                                 
                                        if (localPrenom_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrenom_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Prenom_Contact cannot be null!!");
                                        }
                                    } if (localNumero_Telephone_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Numero_Telephone_Contact"));
                                 
                                        if (localNumero_Telephone_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumero_Telephone_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Numero_Telephone_Contact cannot be null!!");
                                        }
                                    } if (localAdresse_mail_ContactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Adresse_mail_Contact"));
                                 
                                        if (localAdresse_mail_Contact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAdresse_mail_Contact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Adresse_mail_Contact cannot be null!!");
                                        }
                                    } if (localNb_RelanceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nb_Relance"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Relance));
                            } if (localAbsence_de_consigneTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Absence_de_consigne"));
                            
                            
                                    elementList.add(localAbsence_de_consigne==null?null:
                                    localAbsence_de_consigne);
                                } if (localAppel_astreinteTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Appel_astreinte"));
                            
                            
                                    elementList.add(localAppel_astreinte==null?null:
                                    localAppel_astreinte);
                                } if (localNb_Tickets_FilsTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nb_Tickets_Fils"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Tickets_Fils));
                            } if (localEnvironnementTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Environnement"));
                            
                            
                                    elementList.add(localEnvironnement==null?null:
                                    localEnvironnement);
                                } if (localTicketSourceSignaleeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "TicketSourceSignalee"));
                                 
                                        if (localTicketSourceSignalee != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTicketSourceSignalee));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("TicketSourceSignalee cannot be null!!");
                                        }
                                    } if (localTraitePilotageTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "TraitePilotage"));
                            
                            
                                    elementList.add(localTraitePilotage==null?null:
                                    localTraitePilotage);
                                } if (localServiceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Service"));
                                 
                                        if (localService != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localService));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Service cannot be null!!");
                                        }
                                    } if (localHPD_CITracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "HPD_CI"));
                                 
                                        if (localHPD_CI != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localHPD_CI));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("HPD_CI cannot be null!!");
                                        }
                                    } if (localServiceCITracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "ServiceCI"));
                                 
                                        if (localServiceCI != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localServiceCI));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("ServiceCI cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static GetListValues_type1 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            GetListValues_type1 object =
                new GetListValues_type1();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"getListValues_type1".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetListValues_type1)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Numero_Incident").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Numero_Incident" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumero_Incident(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Resume").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Resume" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setResume(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Remarques").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Remarques" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setRemarques(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Createur").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Createur" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCreateur(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_creation").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_creation" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_creation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_signalement").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_signalement" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_signalement(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Modifie_par").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Modifie_par" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifie_par(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_modification").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_modification" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_modification(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Etat").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Etat" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEtat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Motif_Etat").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Motif_Etat" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMotif_Etat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Source_signalee").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Source_signalee" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSource_signalee(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Type_incident").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Type_incident" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setType_incident(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Impact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Impact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setImpact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Urgence").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Urgence" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUrgence(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Priorite").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Priorite" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPriorite(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Groupe_Affecte").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Groupe_Affecte" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setGroupe_Affecte(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Intervenant").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Intervenant" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIntervenant(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Delai_resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Delai_resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDelai_resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Groupe_resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Groupe_resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setGroupe_resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setResolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Methode_Resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Methode_Resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMethode_Resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Type_Association_Incident").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setType_Association_Incident(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setType_Association_Incident(Type_Association_IncidentType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Societe_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Societe_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSociete_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Departement_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Departement_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDepartement_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Site_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Site_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSite_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Login_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Login_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogin_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nom_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nom_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNom_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Prenom_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Prenom_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrenom_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Adresse_mail_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Adresse_mail_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAdresse_mail_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Numero_Telephone_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Numero_Telephone_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumero_Telephone_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","VIP").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setVIP(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setVIP(VIPType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Niv1").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Niv1" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Niv1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Niv2").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Niv2" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Niv2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Niv3").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Niv3" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Niv3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Niv1").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Niv1" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Niv1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Niv2").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Niv2" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Niv2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Niv3").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Niv3" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Niv3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Produit").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Produit" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Produit(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Modele").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Modele" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Modele(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Fabricant").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Fabricant" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Fabricant(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Resol_Niv1").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Resol_Niv1" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Resol_Niv1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Resol_Niv2").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Resol_Niv2" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Resol_Niv2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Ope_Resol_Niv3").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Ope_Resol_Niv3" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Ope_Resol_Niv3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Niv1").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Niv1" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Niv1(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Niv2").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Niv2" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Niv2(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Niv3").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Niv3" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Niv3(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Produit").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Produit" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Produit(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Modele").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Modele" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Modele(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Categ_Prod_Resol_Fabricant").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Categ_Prod_Resol_Fabricant" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setCateg_Prod_Resol_Fabricant(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Societe_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Societe_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSociete_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Departement_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Departement_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDepartement_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Site_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Site_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSite_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nom_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nom_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNom_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Prenom_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Prenom_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrenom_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Numero_Telephone_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Numero_Telephone_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumero_Telephone_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Adresse_mail_Contact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Adresse_mail_Contact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setAdresse_mail_Contact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nb_Relance").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nb_Relance" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNb_Relance(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setNb_Relance(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Absence_de_consigne").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setAbsence_de_consigne(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setAbsence_de_consigne(Absence_de_consigneType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Appel_astreinte").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setAppel_astreinte(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setAppel_astreinte(Absence_de_consigneType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nb_Tickets_Fils").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nb_Tickets_Fils" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNb_Tickets_Fils(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setNb_Tickets_Fils(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Environnement").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setEnvironnement(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setEnvironnement(EnvironnementType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","TicketSourceSignalee").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"TicketSourceSignalee" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTicketSourceSignalee(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","TraitePilotage").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setTraitePilotage(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setTraitePilotage(Absence_de_consigneType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Service").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Service" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setService(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","HPD_CI").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"HPD_CI" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setHPD_CI(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","ServiceCI").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"ServiceCI" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setServiceCI(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class GetListValues_type2
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = getListValues_type2
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Numero_Incident
                        */

                        
                                    protected java.lang.String localNumero_Incident ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumero_Incident(){
                               return localNumero_Incident;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Numero_Incident
                               */
                               public void setNumero_Incident(java.lang.String param){
                            
                                            this.localNumero_Incident=param;
                                    

                               }
                            

                        /**
                        * field for Date_creation
                        */

                        
                                    protected java.util.Calendar localDate_creation ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_creationTracker = false ;

                           public boolean isDate_creationSpecified(){
                               return localDate_creationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_creation(){
                               return localDate_creation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_creation
                               */
                               public void setDate_creation(java.util.Calendar param){
                            localDate_creationTracker = param != null;
                                   
                                            this.localDate_creation=param;
                                    

                               }
                            

                        /**
                        * field for Date_signalement
                        */

                        
                                    protected java.util.Calendar localDate_signalement ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_signalementTracker = false ;

                           public boolean isDate_signalementSpecified(){
                               return localDate_signalementTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_signalement(){
                               return localDate_signalement;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_signalement
                               */
                               public void setDate_signalement(java.util.Calendar param){
                            localDate_signalementTracker = param != null;
                                   
                                            this.localDate_signalement=param;
                                    

                               }
                            

                        /**
                        * field for Modifie_par
                        */

                        
                                    protected java.lang.String localModifie_par ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifie_parTracker = false ;

                           public boolean isModifie_parSpecified(){
                               return localModifie_parTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifie_par(){
                               return localModifie_par;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Modifie_par
                               */
                               public void setModifie_par(java.lang.String param){
                            localModifie_parTracker = param != null;
                                   
                                            this.localModifie_par=param;
                                    

                               }
                            

                        /**
                        * field for Date_modification
                        */

                        
                                    protected java.util.Calendar localDate_modification ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_modificationTracker = false ;

                           public boolean isDate_modificationSpecified(){
                               return localDate_modificationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_modification(){
                               return localDate_modification;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_modification
                               */
                               public void setDate_modification(java.util.Calendar param){
                            localDate_modificationTracker = param != null;
                                   
                                            this.localDate_modification=param;
                                    

                               }
                            

                        /**
                        * field for Etat
                        */

                        
                                    protected java.lang.String localEtat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEtatTracker = false ;

                           public boolean isEtatSpecified(){
                               return localEtatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEtat(){
                               return localEtat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Etat
                               */
                               public void setEtat(java.lang.String param){
                            localEtatTracker = param != null;
                                   
                                            this.localEtat=param;
                                    

                               }
                            

                        /**
                        * field for Motif_Etat
                        */

                        
                                    protected java.lang.String localMotif_Etat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMotif_EtatTracker = false ;

                           public boolean isMotif_EtatSpecified(){
                               return localMotif_EtatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMotif_Etat(){
                               return localMotif_Etat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Motif_Etat
                               */
                               public void setMotif_Etat(java.lang.String param){
                            localMotif_EtatTracker = param != null;
                                   
                                            this.localMotif_Etat=param;
                                    

                               }
                            

                        /**
                        * field for Source_signalee
                        */

                        
                                    protected java.lang.String localSource_signalee ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSource_signaleeTracker = false ;

                           public boolean isSource_signaleeSpecified(){
                               return localSource_signaleeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSource_signalee(){
                               return localSource_signalee;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Source_signalee
                               */
                               public void setSource_signalee(java.lang.String param){
                            localSource_signaleeTracker = param != null;
                                   
                                            this.localSource_signalee=param;
                                    

                               }
                            

                        /**
                        * field for Type_incident
                        */

                        
                                    protected java.lang.String localType_incident ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localType_incidentTracker = false ;

                           public boolean isType_incidentSpecified(){
                               return localType_incidentTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getType_incident(){
                               return localType_incident;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Type_incident
                               */
                               public void setType_incident(java.lang.String param){
                            localType_incidentTracker = param != null;
                                   
                                            this.localType_incident=param;
                                    

                               }
                            

                        /**
                        * field for Impact
                        */

                        
                                    protected java.lang.String localImpact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localImpactTracker = false ;

                           public boolean isImpactSpecified(){
                               return localImpactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getImpact(){
                               return localImpact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Impact
                               */
                               public void setImpact(java.lang.String param){
                            localImpactTracker = param != null;
                                   
                                            this.localImpact=param;
                                    

                               }
                            

                        /**
                        * field for Urgence
                        */

                        
                                    protected java.lang.String localUrgence ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUrgenceTracker = false ;

                           public boolean isUrgenceSpecified(){
                               return localUrgenceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUrgence(){
                               return localUrgence;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Urgence
                               */
                               public void setUrgence(java.lang.String param){
                            localUrgenceTracker = param != null;
                                   
                                            this.localUrgence=param;
                                    

                               }
                            

                        /**
                        * field for Priorite
                        */

                        
                                    protected java.lang.String localPriorite ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrioriteTracker = false ;

                           public boolean isPrioriteSpecified(){
                               return localPrioriteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPriorite(){
                               return localPriorite;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Priorite
                               */
                               public void setPriorite(java.lang.String param){
                            localPrioriteTracker = param != null;
                                   
                                            this.localPriorite=param;
                                    

                               }
                            

                        /**
                        * field for Groupe_Affecte
                        */

                        
                                    protected java.lang.String localGroupe_Affecte ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localGroupe_AffecteTracker = false ;

                           public boolean isGroupe_AffecteSpecified(){
                               return localGroupe_AffecteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getGroupe_Affecte(){
                               return localGroupe_Affecte;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Groupe_Affecte
                               */
                               public void setGroupe_Affecte(java.lang.String param){
                            localGroupe_AffecteTracker = param != null;
                                   
                                            this.localGroupe_Affecte=param;
                                    

                               }
                            

                        /**
                        * field for Intervenant
                        */

                        
                                    protected java.lang.String localIntervenant ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIntervenantTracker = false ;

                           public boolean isIntervenantSpecified(){
                               return localIntervenantTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getIntervenant(){
                               return localIntervenant;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Intervenant
                               */
                               public void setIntervenant(java.lang.String param){
                            localIntervenantTracker = param != null;
                                   
                                            this.localIntervenant=param;
                                    

                               }
                            

                        /**
                        * field for Date_resolution
                        */

                        
                                    protected java.util.Calendar localDate_resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_resolutionTracker = false ;

                           public boolean isDate_resolutionSpecified(){
                               return localDate_resolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_resolution(){
                               return localDate_resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_resolution
                               */
                               public void setDate_resolution(java.util.Calendar param){
                            localDate_resolutionTracker = param != null;
                                   
                                            this.localDate_resolution=param;
                                    

                               }
                            

                        /**
                        * field for Groupe_resolution
                        */

                        
                                    protected java.lang.String localGroupe_resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localGroupe_resolutionTracker = false ;

                           public boolean isGroupe_resolutionSpecified(){
                               return localGroupe_resolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getGroupe_resolution(){
                               return localGroupe_resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Groupe_resolution
                               */
                               public void setGroupe_resolution(java.lang.String param){
                            localGroupe_resolutionTracker = param != null;
                                   
                                            this.localGroupe_resolution=param;
                                    

                               }
                            

                        /**
                        * field for Resolution
                        */

                        
                                    protected java.lang.String localResolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localResolutionTracker = false ;

                           public boolean isResolutionSpecified(){
                               return localResolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getResolution(){
                               return localResolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Resolution
                               */
                               public void setResolution(java.lang.String param){
                            localResolutionTracker = param != null;
                                   
                                            this.localResolution=param;
                                    

                               }
                            

                        /**
                        * field for Login_Client
                        */

                        
                                    protected java.lang.String localLogin_Client ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogin_ClientTracker = false ;

                           public boolean isLogin_ClientSpecified(){
                               return localLogin_ClientTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogin_Client(){
                               return localLogin_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Login_Client
                               */
                               public void setLogin_Client(java.lang.String param){
                            localLogin_ClientTracker = param != null;
                                   
                                            this.localLogin_Client=param;
                                    

                               }
                            

                        /**
                        * field for Nom_Client
                        */

                        
                                    protected java.lang.String localNom_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNom_Client(){
                               return localNom_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nom_Client
                               */
                               public void setNom_Client(java.lang.String param){
                            
                                            this.localNom_Client=param;
                                    

                               }
                            

                        /**
                        * field for Prenom_Client
                        */

                        
                                    protected java.lang.String localPrenom_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrenom_Client(){
                               return localPrenom_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Prenom_Client
                               */
                               public void setPrenom_Client(java.lang.String param){
                            
                                            this.localPrenom_Client=param;
                                    

                               }
                            

                        /**
                        * field for VIP
                        */

                        
                                    protected VIPType localVIP ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localVIPTracker = false ;

                           public boolean isVIPSpecified(){
                               return localVIPTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return VIPType
                           */
                           public  VIPType getVIP(){
                               return localVIP;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param VIP
                               */
                               public void setVIP(VIPType param){
                            localVIPTracker = true;
                                   
                                            this.localVIP=param;
                                    

                               }
                            

                        /**
                        * field for Nb_Relance
                        */

                        
                                    protected int localNb_Relance =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("0");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNb_RelanceTracker = false ;

                           public boolean isNb_RelanceSpecified(){
                               return localNb_RelanceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getNb_Relance(){
                               return localNb_Relance;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nb_Relance
                               */
                               public void setNb_Relance(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localNb_RelanceTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localNb_Relance=param;
                                    

                               }
                            

                        /**
                        * field for Environnement
                        */

                        
                                    protected EnvironnementType localEnvironnement ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnvironnementTracker = false ;

                           public boolean isEnvironnementSpecified(){
                               return localEnvironnementTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return EnvironnementType
                           */
                           public  EnvironnementType getEnvironnement(){
                               return localEnvironnement;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Environnement
                               */
                               public void setEnvironnement(EnvironnementType param){
                            localEnvironnementTracker = true;
                                   
                                            this.localEnvironnement=param;
                                    

                               }
                            

                        /**
                        * field for TicketSourceSignalee
                        */

                        
                                    protected java.lang.String localTicketSourceSignalee ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTicketSourceSignaleeTracker = false ;

                           public boolean isTicketSourceSignaleeSpecified(){
                               return localTicketSourceSignaleeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTicketSourceSignalee(){
                               return localTicketSourceSignalee;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TicketSourceSignalee
                               */
                               public void setTicketSourceSignalee(java.lang.String param){
                            localTicketSourceSignaleeTracker = param != null;
                                   
                                            this.localTicketSourceSignalee=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":getListValues_type2",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "getListValues_type2",
                           xmlWriter);
                   }

               
                   }
               
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Numero_Incident", xmlWriter);
                             

                                          if (localNumero_Incident==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Numero_Incident cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumero_Incident);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localDate_creationTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_creation", xmlWriter);
                             

                                          if (localDate_creation==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_creation cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_creation));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_signalementTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_signalement", xmlWriter);
                             

                                          if (localDate_signalement==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_signalement cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_signalement));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifie_parTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Modifie_par", xmlWriter);
                             

                                          if (localModifie_par==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Modifie_par cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifie_par);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_modificationTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_modification", xmlWriter);
                             

                                          if (localDate_modification==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_modification cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_modification));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEtatTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Etat", xmlWriter);
                             

                                          if (localEtat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Etat cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEtat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMotif_EtatTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Motif_Etat", xmlWriter);
                             

                                          if (localMotif_Etat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Motif_Etat cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMotif_Etat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSource_signaleeTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Source_signalee", xmlWriter);
                             

                                          if (localSource_signalee==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Source_signalee cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSource_signalee);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localType_incidentTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Type_incident", xmlWriter);
                             

                                          if (localType_incident==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Type_incident cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localType_incident);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localImpactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Impact", xmlWriter);
                             

                                          if (localImpact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Impact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localImpact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUrgenceTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Urgence", xmlWriter);
                             

                                          if (localUrgence==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Urgence cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUrgence);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPrioriteTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Priorite", xmlWriter);
                             

                                          if (localPriorite==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Priorite cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPriorite);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localGroupe_AffecteTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Groupe_Affecte", xmlWriter);
                             

                                          if (localGroupe_Affecte==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Groupe_Affecte cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localGroupe_Affecte);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIntervenantTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Intervenant", xmlWriter);
                             

                                          if (localIntervenant==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Intervenant cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localIntervenant);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_resolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_resolution", xmlWriter);
                             

                                          if (localDate_resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_resolution));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localGroupe_resolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Groupe_resolution", xmlWriter);
                             

                                          if (localGroupe_resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Groupe_resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localGroupe_resolution);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localResolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Resolution", xmlWriter);
                             

                                          if (localResolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localResolution);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogin_ClientTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Login_Client", xmlWriter);
                             

                                          if (localLogin_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Login_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogin_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nom_Client", xmlWriter);
                             

                                          if (localNom_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Nom_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNom_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Prenom_Client", xmlWriter);
                             

                                          if (localPrenom_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Prenom_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrenom_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localVIPTracker){
                                    if (localVIP==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "VIP", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localVIP.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","VIP"),
                                        xmlWriter);
                                    }
                                } if (localNb_RelanceTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nb_Relance", xmlWriter);
                             
                                               if (localNb_Relance==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Nb_Relance cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Relance));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnvironnementTracker){
                                    if (localEnvironnement==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "Environnement", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localEnvironnement.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Environnement"),
                                        xmlWriter);
                                    }
                                } if (localTicketSourceSignaleeTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "TicketSourceSignalee", xmlWriter);
                             

                                          if (localTicketSourceSignalee==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("TicketSourceSignalee cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTicketSourceSignalee);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Numero_Incident"));
                                 
                                        if (localNumero_Incident != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumero_Incident));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Numero_Incident cannot be null!!");
                                        }
                                     if (localDate_creationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_creation"));
                                 
                                        if (localDate_creation != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_creation));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_creation cannot be null!!");
                                        }
                                    } if (localDate_signalementTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_signalement"));
                                 
                                        if (localDate_signalement != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_signalement));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_signalement cannot be null!!");
                                        }
                                    } if (localModifie_parTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Modifie_par"));
                                 
                                        if (localModifie_par != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifie_par));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Modifie_par cannot be null!!");
                                        }
                                    } if (localDate_modificationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_modification"));
                                 
                                        if (localDate_modification != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_modification));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_modification cannot be null!!");
                                        }
                                    } if (localEtatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Etat"));
                                 
                                        if (localEtat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEtat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Etat cannot be null!!");
                                        }
                                    } if (localMotif_EtatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Motif_Etat"));
                                 
                                        if (localMotif_Etat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMotif_Etat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Motif_Etat cannot be null!!");
                                        }
                                    } if (localSource_signaleeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Source_signalee"));
                                 
                                        if (localSource_signalee != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSource_signalee));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Source_signalee cannot be null!!");
                                        }
                                    } if (localType_incidentTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Type_incident"));
                                 
                                        if (localType_incident != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localType_incident));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Type_incident cannot be null!!");
                                        }
                                    } if (localImpactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Impact"));
                                 
                                        if (localImpact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImpact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Impact cannot be null!!");
                                        }
                                    } if (localUrgenceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Urgence"));
                                 
                                        if (localUrgence != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUrgence));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Urgence cannot be null!!");
                                        }
                                    } if (localPrioriteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Priorite"));
                                 
                                        if (localPriorite != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPriorite));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Priorite cannot be null!!");
                                        }
                                    } if (localGroupe_AffecteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Groupe_Affecte"));
                                 
                                        if (localGroupe_Affecte != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGroupe_Affecte));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Groupe_Affecte cannot be null!!");
                                        }
                                    } if (localIntervenantTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Intervenant"));
                                 
                                        if (localIntervenant != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIntervenant));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Intervenant cannot be null!!");
                                        }
                                    } if (localDate_resolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_resolution"));
                                 
                                        if (localDate_resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_resolution cannot be null!!");
                                        }
                                    } if (localGroupe_resolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Groupe_resolution"));
                                 
                                        if (localGroupe_resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGroupe_resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Groupe_resolution cannot be null!!");
                                        }
                                    } if (localResolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Resolution"));
                                 
                                        if (localResolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Resolution cannot be null!!");
                                        }
                                    } if (localLogin_ClientTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Login_Client"));
                                 
                                        if (localLogin_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogin_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Login_Client cannot be null!!");
                                        }
                                    }
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nom_Client"));
                                 
                                        if (localNom_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNom_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Nom_Client cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Prenom_Client"));
                                 
                                        if (localPrenom_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrenom_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Prenom_Client cannot be null!!");
                                        }
                                     if (localVIPTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "VIP"));
                            
                            
                                    elementList.add(localVIP==null?null:
                                    localVIP);
                                } if (localNb_RelanceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nb_Relance"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Relance));
                            } if (localEnvironnementTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Environnement"));
                            
                            
                                    elementList.add(localEnvironnement==null?null:
                                    localEnvironnement);
                                } if (localTicketSourceSignaleeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "TicketSourceSignalee"));
                                 
                                        if (localTicketSourceSignalee != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTicketSourceSignalee));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("TicketSourceSignalee cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static GetListValues_type2 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            GetListValues_type2 object =
                new GetListValues_type2();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"getListValues_type2".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetListValues_type2)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Numero_Incident").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Numero_Incident" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumero_Incident(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_creation").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_creation" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_creation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_signalement").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_signalement" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_signalement(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Modifie_par").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Modifie_par" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifie_par(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_modification").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_modification" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_modification(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Etat").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Etat" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEtat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Motif_Etat").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Motif_Etat" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMotif_Etat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Source_signalee").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Source_signalee" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSource_signalee(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Type_incident").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Type_incident" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setType_incident(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Impact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Impact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setImpact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Urgence").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Urgence" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUrgence(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Priorite").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Priorite" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPriorite(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Groupe_Affecte").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Groupe_Affecte" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setGroupe_Affecte(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Intervenant").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Intervenant" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIntervenant(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Groupe_resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Groupe_resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setGroupe_resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setResolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Login_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Login_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogin_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nom_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nom_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNom_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Prenom_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Prenom_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrenom_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","VIP").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setVIP(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setVIP(VIPType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nb_Relance").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nb_Relance" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNb_Relance(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setNb_Relance(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Environnement").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setEnvironnement(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setEnvironnement(EnvironnementType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","TicketSourceSignalee").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"TicketSourceSignalee" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTicketSourceSignalee(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class GetListValues_type0
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = getListValues_type0
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Numero_Incident
                        */

                        
                                    protected java.lang.String localNumero_Incident ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNumero_Incident(){
                               return localNumero_Incident;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Numero_Incident
                               */
                               public void setNumero_Incident(java.lang.String param){
                            
                                            this.localNumero_Incident=param;
                                    

                               }
                            

                        /**
                        * field for Date_creation
                        */

                        
                                    protected java.util.Calendar localDate_creation ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_creationTracker = false ;

                           public boolean isDate_creationSpecified(){
                               return localDate_creationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_creation(){
                               return localDate_creation;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_creation
                               */
                               public void setDate_creation(java.util.Calendar param){
                            localDate_creationTracker = param != null;
                                   
                                            this.localDate_creation=param;
                                    

                               }
                            

                        /**
                        * field for Date_signalement
                        */

                        
                                    protected java.util.Calendar localDate_signalement ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_signalementTracker = false ;

                           public boolean isDate_signalementSpecified(){
                               return localDate_signalementTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_signalement(){
                               return localDate_signalement;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_signalement
                               */
                               public void setDate_signalement(java.util.Calendar param){
                            localDate_signalementTracker = param != null;
                                   
                                            this.localDate_signalement=param;
                                    

                               }
                            

                        /**
                        * field for Modifie_par
                        */

                        
                                    protected java.lang.String localModifie_par ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localModifie_parTracker = false ;

                           public boolean isModifie_parSpecified(){
                               return localModifie_parTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getModifie_par(){
                               return localModifie_par;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Modifie_par
                               */
                               public void setModifie_par(java.lang.String param){
                            localModifie_parTracker = param != null;
                                   
                                            this.localModifie_par=param;
                                    

                               }
                            

                        /**
                        * field for Date_modification
                        */

                        
                                    protected java.util.Calendar localDate_modification ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_modificationTracker = false ;

                           public boolean isDate_modificationSpecified(){
                               return localDate_modificationTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_modification(){
                               return localDate_modification;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_modification
                               */
                               public void setDate_modification(java.util.Calendar param){
                            localDate_modificationTracker = param != null;
                                   
                                            this.localDate_modification=param;
                                    

                               }
                            

                        /**
                        * field for Etat
                        */

                        
                                    protected java.lang.String localEtat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEtatTracker = false ;

                           public boolean isEtatSpecified(){
                               return localEtatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getEtat(){
                               return localEtat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Etat
                               */
                               public void setEtat(java.lang.String param){
                            localEtatTracker = param != null;
                                   
                                            this.localEtat=param;
                                    

                               }
                            

                        /**
                        * field for Motif_Etat
                        */

                        
                                    protected java.lang.String localMotif_Etat ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localMotif_EtatTracker = false ;

                           public boolean isMotif_EtatSpecified(){
                               return localMotif_EtatTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMotif_Etat(){
                               return localMotif_Etat;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Motif_Etat
                               */
                               public void setMotif_Etat(java.lang.String param){
                            localMotif_EtatTracker = param != null;
                                   
                                            this.localMotif_Etat=param;
                                    

                               }
                            

                        /**
                        * field for Source_signalee
                        */

                        
                                    protected java.lang.String localSource_signalee ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localSource_signaleeTracker = false ;

                           public boolean isSource_signaleeSpecified(){
                               return localSource_signaleeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getSource_signalee(){
                               return localSource_signalee;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Source_signalee
                               */
                               public void setSource_signalee(java.lang.String param){
                            localSource_signaleeTracker = param != null;
                                   
                                            this.localSource_signalee=param;
                                    

                               }
                            

                        /**
                        * field for Type_incident
                        */

                        
                                    protected java.lang.String localType_incident ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localType_incidentTracker = false ;

                           public boolean isType_incidentSpecified(){
                               return localType_incidentTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getType_incident(){
                               return localType_incident;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Type_incident
                               */
                               public void setType_incident(java.lang.String param){
                            localType_incidentTracker = param != null;
                                   
                                            this.localType_incident=param;
                                    

                               }
                            

                        /**
                        * field for Impact
                        */

                        
                                    protected java.lang.String localImpact ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localImpactTracker = false ;

                           public boolean isImpactSpecified(){
                               return localImpactTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getImpact(){
                               return localImpact;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Impact
                               */
                               public void setImpact(java.lang.String param){
                            localImpactTracker = param != null;
                                   
                                            this.localImpact=param;
                                    

                               }
                            

                        /**
                        * field for Urgence
                        */

                        
                                    protected java.lang.String localUrgence ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localUrgenceTracker = false ;

                           public boolean isUrgenceSpecified(){
                               return localUrgenceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getUrgence(){
                               return localUrgence;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Urgence
                               */
                               public void setUrgence(java.lang.String param){
                            localUrgenceTracker = param != null;
                                   
                                            this.localUrgence=param;
                                    

                               }
                            

                        /**
                        * field for Priorite
                        */

                        
                                    protected java.lang.String localPriorite ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localPrioriteTracker = false ;

                           public boolean isPrioriteSpecified(){
                               return localPrioriteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPriorite(){
                               return localPriorite;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Priorite
                               */
                               public void setPriorite(java.lang.String param){
                            localPrioriteTracker = param != null;
                                   
                                            this.localPriorite=param;
                                    

                               }
                            

                        /**
                        * field for Groupe_Affecte
                        */

                        
                                    protected java.lang.String localGroupe_Affecte ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localGroupe_AffecteTracker = false ;

                           public boolean isGroupe_AffecteSpecified(){
                               return localGroupe_AffecteTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getGroupe_Affecte(){
                               return localGroupe_Affecte;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Groupe_Affecte
                               */
                               public void setGroupe_Affecte(java.lang.String param){
                            localGroupe_AffecteTracker = param != null;
                                   
                                            this.localGroupe_Affecte=param;
                                    

                               }
                            

                        /**
                        * field for Intervenant
                        */

                        
                                    protected java.lang.String localIntervenant ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIntervenantTracker = false ;

                           public boolean isIntervenantSpecified(){
                               return localIntervenantTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getIntervenant(){
                               return localIntervenant;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Intervenant
                               */
                               public void setIntervenant(java.lang.String param){
                            localIntervenantTracker = param != null;
                                   
                                            this.localIntervenant=param;
                                    

                               }
                            

                        /**
                        * field for Date_resolution
                        */

                        
                                    protected java.util.Calendar localDate_resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localDate_resolutionTracker = false ;

                           public boolean isDate_resolutionSpecified(){
                               return localDate_resolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.util.Calendar
                           */
                           public  java.util.Calendar getDate_resolution(){
                               return localDate_resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Date_resolution
                               */
                               public void setDate_resolution(java.util.Calendar param){
                            localDate_resolutionTracker = param != null;
                                   
                                            this.localDate_resolution=param;
                                    

                               }
                            

                        /**
                        * field for Groupe_resolution
                        */

                        
                                    protected java.lang.String localGroupe_resolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localGroupe_resolutionTracker = false ;

                           public boolean isGroupe_resolutionSpecified(){
                               return localGroupe_resolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getGroupe_resolution(){
                               return localGroupe_resolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Groupe_resolution
                               */
                               public void setGroupe_resolution(java.lang.String param){
                            localGroupe_resolutionTracker = param != null;
                                   
                                            this.localGroupe_resolution=param;
                                    

                               }
                            

                        /**
                        * field for Resolution
                        */

                        
                                    protected java.lang.String localResolution ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localResolutionTracker = false ;

                           public boolean isResolutionSpecified(){
                               return localResolutionTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getResolution(){
                               return localResolution;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Resolution
                               */
                               public void setResolution(java.lang.String param){
                            localResolutionTracker = param != null;
                                   
                                            this.localResolution=param;
                                    

                               }
                            

                        /**
                        * field for Login_Client
                        */

                        
                                    protected java.lang.String localLogin_Client ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localLogin_ClientTracker = false ;

                           public boolean isLogin_ClientSpecified(){
                               return localLogin_ClientTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getLogin_Client(){
                               return localLogin_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Login_Client
                               */
                               public void setLogin_Client(java.lang.String param){
                            localLogin_ClientTracker = param != null;
                                   
                                            this.localLogin_Client=param;
                                    

                               }
                            

                        /**
                        * field for Nom_Client
                        */

                        
                                    protected java.lang.String localNom_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getNom_Client(){
                               return localNom_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nom_Client
                               */
                               public void setNom_Client(java.lang.String param){
                            
                                            this.localNom_Client=param;
                                    

                               }
                            

                        /**
                        * field for Prenom_Client
                        */

                        
                                    protected java.lang.String localPrenom_Client ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getPrenom_Client(){
                               return localPrenom_Client;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Prenom_Client
                               */
                               public void setPrenom_Client(java.lang.String param){
                            
                                            this.localPrenom_Client=param;
                                    

                               }
                            

                        /**
                        * field for VIP
                        */

                        
                                    protected VIPType localVIP ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localVIPTracker = false ;

                           public boolean isVIPSpecified(){
                               return localVIPTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return VIPType
                           */
                           public  VIPType getVIP(){
                               return localVIP;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param VIP
                               */
                               public void setVIP(VIPType param){
                            localVIPTracker = true;
                                   
                                            this.localVIP=param;
                                    

                               }
                            

                        /**
                        * field for Nb_Relance
                        */

                        
                                    protected int localNb_Relance =
                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt("0");
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localNb_RelanceTracker = false ;

                           public boolean isNb_RelanceSpecified(){
                               return localNb_RelanceTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return int
                           */
                           public  int getNb_Relance(){
                               return localNb_Relance;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Nb_Relance
                               */
                               public void setNb_Relance(int param){
                            
                                       // setting primitive attribute tracker to true
                                       localNb_RelanceTracker =
                                       param != java.lang.Integer.MIN_VALUE;
                                   
                                            this.localNb_Relance=param;
                                    

                               }
                            

                        /**
                        * field for Environnement
                        */

                        
                                    protected EnvironnementType localEnvironnement ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localEnvironnementTracker = false ;

                           public boolean isEnvironnementSpecified(){
                               return localEnvironnementTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return EnvironnementType
                           */
                           public  EnvironnementType getEnvironnement(){
                               return localEnvironnement;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Environnement
                               */
                               public void setEnvironnement(EnvironnementType param){
                            localEnvironnementTracker = true;
                                   
                                            this.localEnvironnement=param;
                                    

                               }
                            

                        /**
                        * field for TicketSourceSignalee
                        */

                        
                                    protected java.lang.String localTicketSourceSignalee ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localTicketSourceSignaleeTracker = false ;

                           public boolean isTicketSourceSignaleeSpecified(){
                               return localTicketSourceSignaleeTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getTicketSourceSignalee(){
                               return localTicketSourceSignalee;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param TicketSourceSignalee
                               */
                               public void setTicketSourceSignalee(java.lang.String param){
                            localTicketSourceSignaleeTracker = param != null;
                                   
                                            this.localTicketSourceSignalee=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":getListValues_type0",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "getListValues_type0",
                           xmlWriter);
                   }

               
                   }
               
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Numero_Incident", xmlWriter);
                             

                                          if (localNumero_Incident==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Numero_Incident cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNumero_Incident);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localDate_creationTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_creation", xmlWriter);
                             

                                          if (localDate_creation==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_creation cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_creation));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_signalementTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_signalement", xmlWriter);
                             

                                          if (localDate_signalement==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_signalement cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_signalement));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localModifie_parTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Modifie_par", xmlWriter);
                             

                                          if (localModifie_par==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Modifie_par cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localModifie_par);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_modificationTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_modification", xmlWriter);
                             

                                          if (localDate_modification==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_modification cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_modification));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEtatTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Etat", xmlWriter);
                             

                                          if (localEtat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Etat cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localEtat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localMotif_EtatTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Motif_Etat", xmlWriter);
                             

                                          if (localMotif_Etat==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Motif_Etat cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMotif_Etat);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localSource_signaleeTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Source_signalee", xmlWriter);
                             

                                          if (localSource_signalee==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Source_signalee cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localSource_signalee);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localType_incidentTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Type_incident", xmlWriter);
                             

                                          if (localType_incident==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Type_incident cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localType_incident);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localImpactTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Impact", xmlWriter);
                             

                                          if (localImpact==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Impact cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localImpact);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localUrgenceTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Urgence", xmlWriter);
                             

                                          if (localUrgence==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Urgence cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localUrgence);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localPrioriteTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Priorite", xmlWriter);
                             

                                          if (localPriorite==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Priorite cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPriorite);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localGroupe_AffecteTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Groupe_Affecte", xmlWriter);
                             

                                          if (localGroupe_Affecte==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Groupe_Affecte cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localGroupe_Affecte);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localIntervenantTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Intervenant", xmlWriter);
                             

                                          if (localIntervenant==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Intervenant cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localIntervenant);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localDate_resolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Date_resolution", xmlWriter);
                             

                                          if (localDate_resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Date_resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_resolution));
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localGroupe_resolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Groupe_resolution", xmlWriter);
                             

                                          if (localGroupe_resolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Groupe_resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localGroupe_resolution);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localResolutionTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Resolution", xmlWriter);
                             

                                          if (localResolution==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Resolution cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localResolution);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localLogin_ClientTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Login_Client", xmlWriter);
                             

                                          if (localLogin_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Login_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localLogin_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nom_Client", xmlWriter);
                             

                                          if (localNom_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Nom_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localNom_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Prenom_Client", xmlWriter);
                             

                                          if (localPrenom_Client==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Prenom_Client cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localPrenom_Client);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                              if (localVIPTracker){
                                    if (localVIP==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "VIP", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localVIP.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","VIP"),
                                        xmlWriter);
                                    }
                                } if (localNb_RelanceTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Nb_Relance", xmlWriter);
                             
                                               if (localNb_Relance==java.lang.Integer.MIN_VALUE) {
                                           
                                                         throw new org.apache.axis2.databinding.ADBException("Nb_Relance cannot be null!!");
                                                      
                                               } else {
                                                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Relance));
                                               }
                                    
                                   xmlWriter.writeEndElement();
                             } if (localEnvironnementTracker){
                                    if (localEnvironnement==null){

                                        writeStartElement(null, "urn:CUS_HPD_Interface-Query_WS", "Environnement", xmlWriter);

                                       // write the nil attribute
                                      writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                      xmlWriter.writeEndElement();
                                    }else{
                                     localEnvironnement.serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Environnement"),
                                        xmlWriter);
                                    }
                                } if (localTicketSourceSignaleeTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "TicketSourceSignalee", xmlWriter);
                             

                                          if (localTicketSourceSignalee==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("TicketSourceSignalee cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localTicketSourceSignalee);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Numero_Incident"));
                                 
                                        if (localNumero_Incident != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNumero_Incident));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Numero_Incident cannot be null!!");
                                        }
                                     if (localDate_creationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_creation"));
                                 
                                        if (localDate_creation != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_creation));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_creation cannot be null!!");
                                        }
                                    } if (localDate_signalementTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_signalement"));
                                 
                                        if (localDate_signalement != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_signalement));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_signalement cannot be null!!");
                                        }
                                    } if (localModifie_parTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Modifie_par"));
                                 
                                        if (localModifie_par != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localModifie_par));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Modifie_par cannot be null!!");
                                        }
                                    } if (localDate_modificationTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_modification"));
                                 
                                        if (localDate_modification != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_modification));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_modification cannot be null!!");
                                        }
                                    } if (localEtatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Etat"));
                                 
                                        if (localEtat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEtat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Etat cannot be null!!");
                                        }
                                    } if (localMotif_EtatTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Motif_Etat"));
                                 
                                        if (localMotif_Etat != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMotif_Etat));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Motif_Etat cannot be null!!");
                                        }
                                    } if (localSource_signaleeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Source_signalee"));
                                 
                                        if (localSource_signalee != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSource_signalee));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Source_signalee cannot be null!!");
                                        }
                                    } if (localType_incidentTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Type_incident"));
                                 
                                        if (localType_incident != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localType_incident));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Type_incident cannot be null!!");
                                        }
                                    } if (localImpactTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Impact"));
                                 
                                        if (localImpact != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localImpact));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Impact cannot be null!!");
                                        }
                                    } if (localUrgenceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Urgence"));
                                 
                                        if (localUrgence != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localUrgence));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Urgence cannot be null!!");
                                        }
                                    } if (localPrioriteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Priorite"));
                                 
                                        if (localPriorite != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPriorite));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Priorite cannot be null!!");
                                        }
                                    } if (localGroupe_AffecteTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Groupe_Affecte"));
                                 
                                        if (localGroupe_Affecte != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGroupe_Affecte));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Groupe_Affecte cannot be null!!");
                                        }
                                    } if (localIntervenantTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Intervenant"));
                                 
                                        if (localIntervenant != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIntervenant));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Intervenant cannot be null!!");
                                        }
                                    } if (localDate_resolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Date_resolution"));
                                 
                                        if (localDate_resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate_resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Date_resolution cannot be null!!");
                                        }
                                    } if (localGroupe_resolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Groupe_resolution"));
                                 
                                        if (localGroupe_resolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localGroupe_resolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Groupe_resolution cannot be null!!");
                                        }
                                    } if (localResolutionTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Resolution"));
                                 
                                        if (localResolution != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localResolution));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Resolution cannot be null!!");
                                        }
                                    } if (localLogin_ClientTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Login_Client"));
                                 
                                        if (localLogin_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLogin_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Login_Client cannot be null!!");
                                        }
                                    }
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nom_Client"));
                                 
                                        if (localNom_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNom_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Nom_Client cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Prenom_Client"));
                                 
                                        if (localPrenom_Client != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localPrenom_Client));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Prenom_Client cannot be null!!");
                                        }
                                     if (localVIPTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "VIP"));
                            
                            
                                    elementList.add(localVIP==null?null:
                                    localVIP);
                                } if (localNb_RelanceTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Nb_Relance"));
                                 
                                elementList.add(
                                   org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localNb_Relance));
                            } if (localEnvironnementTracker){
                            elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Environnement"));
                            
                            
                                    elementList.add(localEnvironnement==null?null:
                                    localEnvironnement);
                                } if (localTicketSourceSignaleeTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "TicketSourceSignalee"));
                                 
                                        if (localTicketSourceSignalee != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTicketSourceSignalee));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("TicketSourceSignalee cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static GetListValues_type0 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            GetListValues_type0 object =
                new GetListValues_type0();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"getListValues_type0".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (GetListValues_type0)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Numero_Incident").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Numero_Incident" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNumero_Incident(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_creation").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_creation" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_creation(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_signalement").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_signalement" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_signalement(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Modifie_par").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Modifie_par" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setModifie_par(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_modification").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_modification" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_modification(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Etat").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Etat" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setEtat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Motif_Etat").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Motif_Etat" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMotif_Etat(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Source_signalee").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Source_signalee" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setSource_signalee(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Type_incident").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Type_incident" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setType_incident(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Impact").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Impact" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setImpact(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Urgence").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Urgence" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setUrgence(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Priorite").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Priorite" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPriorite(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Groupe_Affecte").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Groupe_Affecte" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setGroupe_Affecte(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Intervenant").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Intervenant" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIntervenant(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Date_resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Date_resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setDate_resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Groupe_resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Groupe_resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setGroupe_resolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Resolution").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Resolution" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setResolution(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Login_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Login_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setLogin_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nom_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nom_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNom_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Prenom_Client").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Prenom_Client" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setPrenom_Client(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","VIP").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setVIP(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setVIP(VIPType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Nb_Relance").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Nb_Relance" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setNb_Relance(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                               object.setNb_Relance(java.lang.Integer.MIN_VALUE);
                                           
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Environnement").equals(reader.getName())){
                                
                                      nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                      if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                          object.setEnvironnement(null);
                                          reader.next();
                                            
                                            reader.next();
                                          
                                      }else{
                                    
                                                object.setEnvironnement(EnvironnementType.Factory.parse(reader));
                                              
                                        reader.next();
                                    }
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","TicketSourceSignalee").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"TicketSourceSignalee" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setTicketSourceSignalee(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class EnvironnementType
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "EnvironnementType",
                "ns1");

            

                        /**
                        * field for EnvironnementType
                        */

                        
                                    protected java.lang.String localEnvironnementType ;
                                
                            private static java.util.HashMap _table_ = new java.util.HashMap();

                            // Constructor
                            
                                protected EnvironnementType(java.lang.String value, boolean isRegisterValue) {
                                    localEnvironnementType = value;
                                    if (isRegisterValue){
                                        
                                               _table_.put(localEnvironnementType, this);
                                           
                                    }

                                }
                            
                                    public static final java.lang.String _PROD =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("PROD");
                                
                                    public static final java.lang.String _DEV =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("DEV");
                                
                                    public static final java.lang.String _REC =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("REC");
                                
                                    public static final java.lang.String _QUAL =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("QUAL");
                                
                                    public static final java.lang.String _INT =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("INT");
                                
                                    public static final java.lang.String _TEST =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("TEST");
                                
                                    public static final java.lang.String _VALID =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("VALID");
                                
                                public static final EnvironnementType PROD =
                                    new EnvironnementType(_PROD,true);
                            
                                public static final EnvironnementType DEV =
                                    new EnvironnementType(_DEV,true);
                            
                                public static final EnvironnementType REC =
                                    new EnvironnementType(_REC,true);
                            
                                public static final EnvironnementType QUAL =
                                    new EnvironnementType(_QUAL,true);
                            
                                public static final EnvironnementType INT =
                                    new EnvironnementType(_INT,true);
                            
                                public static final EnvironnementType TEST =
                                    new EnvironnementType(_TEST,true);
                            
                                public static final EnvironnementType VALID =
                                    new EnvironnementType(_VALID,true);
                            

                                public java.lang.String getValue() { return localEnvironnementType;}

                                public boolean equals(java.lang.Object obj) {return (obj == this);}
                                public int hashCode() { return toString().hashCode();}
                                public java.lang.String toString() {
                                
                                        return localEnvironnementType.toString();
                                    

                                }

                        

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String _localName = parentQName.getLocalPart();
                        
                            writeStartElement(null, namespace, _localName, xmlWriter);

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":EnvironnementType",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "EnvironnementType",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localEnvironnementType==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("EnvironnementType cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localEnvironnementType);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();
                    

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localEnvironnementType)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static EnvironnementType fromValue(java.lang.String value)
                      throws java.lang.IllegalArgumentException {
                    EnvironnementType enumeration = (EnvironnementType)
                       
                               _table_.get(value);
                           

                    if ((enumeration == null) && !((value == null) || (value.equals("")))) {
                        throw new java.lang.IllegalArgumentException();
                    }
                    return enumeration;
                }
                public static EnvironnementType fromString(java.lang.String value,java.lang.String namespaceURI)
                      throws java.lang.IllegalArgumentException {
                    try {
                       
                                       return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                                   

                    } catch (java.lang.Exception e) {
                        throw new java.lang.IllegalArgumentException();
                    }
                }

                public static EnvironnementType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return EnvironnementType.Factory.fromString(content,namespaceUri);
                    } else {
                       return EnvironnementType.Factory.fromString(content,"");
                    }
                }
            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static EnvironnementType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            EnvironnementType object = null;
                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();
            

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"EnvironnementType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                        if (content.indexOf(":") > 0) {
                                            // this seems to be a Qname so find the namespace and send
                                            prefix = content.substring(0, content.indexOf(":"));
                                            namespaceuri = reader.getNamespaceURI(prefix);
                                            object = EnvironnementType.Factory.fromString(content,namespaceuri);
                                        } else {
                                            // this seems to be not a qname send and empty namespace incase of it is
                                            // check is done in fromString method
                                            object = EnvironnementType.Factory.fromString(content,"");
                                        }
                                        
                                        
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class OutputMapping11
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = OutputMapping11
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for GetListValues
                        * This was an Array!
                        */

                        
                                    protected GetListValues_type2[] localGetListValues ;
                                

                           /**
                           * Auto generated getter method
                           * @return GetListValues_type2[]
                           */
                           public  GetListValues_type2[] getGetListValues(){
                               return localGetListValues;
                           }

                           
                        


                               
                              /**
                               * validate the array for GetListValues
                               */
                              protected void validateGetListValues(GetListValues_type2[] param){
                             
                              if ((param != null) && (param.length < 1)){
                                throw new java.lang.RuntimeException();
                              }
                              
                              }


                             /**
                              * Auto generated setter method
                              * @param param GetListValues
                              */
                              public void setGetListValues(GetListValues_type2[] param){
                              
                                   validateGetListValues(param);

                               
                                      this.localGetListValues=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param GetListValues_type2
                             */
                             public void addGetListValues(GetListValues_type2 param){
                                   if (localGetListValues == null){
                                   localGetListValues = new GetListValues_type2[]{};
                                   }

                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localGetListValues);
                               list.add(param);
                               this.localGetListValues =
                             (GetListValues_type2[])list.toArray(
                            new GetListValues_type2[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":OutputMapping11",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "OutputMapping11",
                           xmlWriter);
                   }

               
                   }
               
                                       if (localGetListValues!=null){
                                            for (int i = 0;i < localGetListValues.length;i++){
                                                if (localGetListValues[i] != null){
                                                 localGetListValues[i].serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                           throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                        
                                    }
                                 
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                             if (localGetListValues!=null) {
                                 for (int i = 0;i < localGetListValues.length;i++){

                                    if (localGetListValues[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                          "getListValues"));
                                         elementList.add(localGetListValues[i]);
                                    } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null !!");
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                    
                             }

                        

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static OutputMapping11 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            OutputMapping11 object =
                new OutputMapping11();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"OutputMapping11".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (OutputMapping11)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(GetListValues_type2.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues").equals(reader.getName())){
                                                                    list1.add(GetListValues_type2.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setGetListValues((GetListValues_type2[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                GetListValues_type2.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class Incident_QueryList_Light_ServiceResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "Incident_QueryList_Light_ServiceResponse",
                "ns1");

            

                        /**
                        * field for Incident_QueryList_Light_ServiceResponse
                        */

                        
                                    protected OutputMapping10 localIncident_QueryList_Light_ServiceResponse ;
                                

                           /**
                           * Auto generated getter method
                           * @return OutputMapping10
                           */
                           public  OutputMapping10 getIncident_QueryList_Light_ServiceResponse(){
                               return localIncident_QueryList_Light_ServiceResponse;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Incident_QueryList_Light_ServiceResponse
                               */
                               public void setIncident_QueryList_Light_ServiceResponse(OutputMapping10 param){
                            
                                            this.localIncident_QueryList_Light_ServiceResponse=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localIncident_QueryList_Light_ServiceResponse==null){
                                   throw new org.apache.axis2.databinding.ADBException("Incident_QueryList_Light_ServiceResponse cannot be null!");
                                 }
                                 localIncident_QueryList_Light_ServiceResponse.serialize(MY_QNAME,xmlWriter);
                            

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localIncident_QueryList_Light_ServiceResponse.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Incident_QueryList_Light_ServiceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Incident_QueryList_Light_ServiceResponse object =
                new Incident_QueryList_Light_ServiceResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Incident_QueryList_Light_ServiceResponse").equals(reader.getName())){
                                
                                                object.setIncident_QueryList_Light_ServiceResponse(OutputMapping10.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class OutputMapping10
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = OutputMapping10
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for GetListValues
                        * This was an Array!
                        */

                        
                                    protected GetListValues_type0[] localGetListValues ;
                                

                           /**
                           * Auto generated getter method
                           * @return GetListValues_type0[]
                           */
                           public  GetListValues_type0[] getGetListValues(){
                               return localGetListValues;
                           }

                           
                        


                               
                              /**
                               * validate the array for GetListValues
                               */
                              protected void validateGetListValues(GetListValues_type0[] param){
                             
                              if ((param != null) && (param.length < 1)){
                                throw new java.lang.RuntimeException();
                              }
                              
                              }


                             /**
                              * Auto generated setter method
                              * @param param GetListValues
                              */
                              public void setGetListValues(GetListValues_type0[] param){
                              
                                   validateGetListValues(param);

                               
                                      this.localGetListValues=param;
                              }

                               
                             
                             /**
                             * Auto generated add method for the array for convenience
                             * @param param GetListValues_type0
                             */
                             public void addGetListValues(GetListValues_type0 param){
                                   if (localGetListValues == null){
                                   localGetListValues = new GetListValues_type0[]{};
                                   }

                            

                               java.util.List list =
                            org.apache.axis2.databinding.utils.ConverterUtil.toList(localGetListValues);
                               list.add(param);
                               this.localGetListValues =
                             (GetListValues_type0[])list.toArray(
                            new GetListValues_type0[list.size()]);

                             }
                             

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":OutputMapping10",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "OutputMapping10",
                           xmlWriter);
                   }

               
                   }
               
                                       if (localGetListValues!=null){
                                            for (int i = 0;i < localGetListValues.length;i++){
                                                if (localGetListValues[i] != null){
                                                 localGetListValues[i].serialize(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues"),
                                                           xmlWriter);
                                                } else {
                                                   
                                                           throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                                    
                                                }

                                            }
                                     } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                        
                                    }
                                 
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                             if (localGetListValues!=null) {
                                 for (int i = 0;i < localGetListValues.length;i++){

                                    if (localGetListValues[i] != null){
                                         elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                          "getListValues"));
                                         elementList.add(localGetListValues[i]);
                                    } else {
                                        
                                               throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null !!");
                                            
                                    }

                                 }
                             } else {
                                 
                                        throw new org.apache.axis2.databinding.ADBException("getListValues cannot be null!!");
                                    
                             }

                        

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static OutputMapping10 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            OutputMapping10 object =
                new OutputMapping10();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"OutputMapping10".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (OutputMapping10)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                        java.util.ArrayList list1 = new java.util.ArrayList();
                    
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues").equals(reader.getName())){
                                
                                    
                                    
                                    // Process the array and step past its final element's end.
                                    list1.add(GetListValues_type0.Factory.parse(reader));
                                                                
                                                        //loop until we find a start element that is not part of this array
                                                        boolean loopDone1 = false;
                                                        while(!loopDone1){
                                                            // We should be at the end element, but make sure
                                                            while (!reader.isEndElement())
                                                                reader.next();
                                                            // Step out of this element
                                                            reader.next();
                                                            // Step to next element event.
                                                            while (!reader.isStartElement() && !reader.isEndElement())
                                                                reader.next();
                                                            if (reader.isEndElement()){
                                                                //two continuous end elements means we are exiting the xml structure
                                                                loopDone1 = true;
                                                            } else {
                                                                if (new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","getListValues").equals(reader.getName())){
                                                                    list1.add(GetListValues_type0.Factory.parse(reader));
                                                                        
                                                                }else{
                                                                    loopDone1 = true;
                                                                }
                                                            }
                                                        }
                                                        // call the converter utility  to convert and set the array
                                                        
                                                        object.setGetListValues((GetListValues_type0[])
                                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                                GetListValues_type0.class,
                                                                list1));
                                                            
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class AuthenticationInfoE
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "AuthenticationInfo",
                "ns1");

            

                        /**
                        * field for AuthenticationInfo
                        */

                        
                                    protected AuthenticationInfo localAuthenticationInfo ;
                                

                           /**
                           * Auto generated getter method
                           * @return AuthenticationInfo
                           */
                           public  AuthenticationInfo getAuthenticationInfo(){
                               return localAuthenticationInfo;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param AuthenticationInfo
                               */
                               public void setAuthenticationInfo(AuthenticationInfo param){
                            
                                            this.localAuthenticationInfo=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localAuthenticationInfo==null){
                                   throw new org.apache.axis2.databinding.ADBException("AuthenticationInfo cannot be null!");
                                 }
                                 localAuthenticationInfo.serialize(MY_QNAME,xmlWriter);
                            

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localAuthenticationInfo.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static AuthenticationInfoE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            AuthenticationInfoE object =
                new AuthenticationInfoE();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","AuthenticationInfo").equals(reader.getName())){
                                
                                                object.setAuthenticationInfo(AuthenticationInfo.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class ExtensionMapper{

          public static java.lang.Object getTypeObject(java.lang.String namespaceURI,
                                                       java.lang.String typeName,
                                                       javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "getListValues_type1".equals(typeName)){
                   
                            return  GetListValues_type1.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "EnvironnementType".equals(typeName)){
                   
                            return  EnvironnementType.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "getListValues_type2".equals(typeName)){
                   
                            return  GetListValues_type2.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "OutputMapping11".equals(typeName)){
                   
                            return  OutputMapping11.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "getListValues_type0".equals(typeName)){
                   
                            return  GetListValues_type0.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "OutputMapping10".equals(typeName)){
                   
                            return  OutputMapping10.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "Absence_de_consigneType".equals(typeName)){
                   
                            return  Absence_de_consigneType.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "InputMapping7".equals(typeName)){
                   
                            return  InputMapping7.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "InputMapping8".equals(typeName)){
                   
                            return  InputMapping8.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "InputMapping11".equals(typeName)){
                   
                            return  InputMapping11.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "OutputMapping8".equals(typeName)){
                   
                            return  OutputMapping8.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "VIPType".equals(typeName)){
                   
                            return  VIPType.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "AuthenticationInfo".equals(typeName)){
                   
                            return  AuthenticationInfo.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "Type_Association_IncidentType".equals(typeName)){
                   
                            return  Type_Association_IncidentType.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "OutputMapping7".equals(typeName)){
                   
                            return  OutputMapping7.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "InputMapping10".equals(typeName)){
                   
                            return  InputMapping10.Factory.parse(reader);
                        

                  }

              
                  if (
                  "urn:CUS_HPD_Interface-Query_WS".equals(namespaceURI) &&
                  "getListValues_type3".equals(typeName)){
                   
                            return  GetListValues_type3.Factory.parse(reader);
                        

                  }

              
             throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
          }

        }
    
        public static class Absence_de_consigneType
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "Absence_de_consigneType",
                "ns1");

            

                        /**
                        * field for Absence_de_consigneType
                        */

                        
                                    protected java.lang.String localAbsence_de_consigneType ;
                                
                            private static java.util.HashMap _table_ = new java.util.HashMap();

                            // Constructor
                            
                                protected Absence_de_consigneType(java.lang.String value, boolean isRegisterValue) {
                                    localAbsence_de_consigneType = value;
                                    if (isRegisterValue){
                                        
                                               _table_.put(localAbsence_de_consigneType, this);
                                           
                                    }

                                }
                            
                                    public static final java.lang.String _Oui =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Oui");
                                
                                public static final Absence_de_consigneType Oui =
                                    new Absence_de_consigneType(_Oui,true);
                            

                                public java.lang.String getValue() { return localAbsence_de_consigneType;}

                                public boolean equals(java.lang.Object obj) {return (obj == this);}
                                public int hashCode() { return toString().hashCode();}
                                public java.lang.String toString() {
                                
                                        return localAbsence_de_consigneType.toString();
                                    

                                }

                        

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String _localName = parentQName.getLocalPart();
                        
                            writeStartElement(null, namespace, _localName, xmlWriter);

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":Absence_de_consigneType",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "Absence_de_consigneType",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localAbsence_de_consigneType==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Absence_de_consigneType cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localAbsence_de_consigneType);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();
                    

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localAbsence_de_consigneType)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Absence_de_consigneType fromValue(java.lang.String value)
                      throws java.lang.IllegalArgumentException {
                    Absence_de_consigneType enumeration = (Absence_de_consigneType)
                       
                               _table_.get(value);
                           

                    if ((enumeration == null) && !((value == null) || (value.equals("")))) {
                        throw new java.lang.IllegalArgumentException();
                    }
                    return enumeration;
                }
                public static Absence_de_consigneType fromString(java.lang.String value,java.lang.String namespaceURI)
                      throws java.lang.IllegalArgumentException {
                    try {
                       
                                       return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                                   

                    } catch (java.lang.Exception e) {
                        throw new java.lang.IllegalArgumentException();
                    }
                }

                public static Absence_de_consigneType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Absence_de_consigneType.Factory.fromString(content,namespaceUri);
                    } else {
                       return Absence_de_consigneType.Factory.fromString(content,"");
                    }
                }
            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Absence_de_consigneType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Absence_de_consigneType object = null;
                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();
            

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Absence_de_consigneType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                        if (content.indexOf(":") > 0) {
                                            // this seems to be a Qname so find the namespace and send
                                            prefix = content.substring(0, content.indexOf(":"));
                                            namespaceuri = reader.getNamespaceURI(prefix);
                                            object = Absence_de_consigneType.Factory.fromString(content,namespaceuri);
                                        } else {
                                            // this seems to be not a qname send and empty namespace incase of it is
                                            // check is done in fromString method
                                            object = Absence_de_consigneType.Factory.fromString(content,"");
                                        }
                                        
                                        
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class Incident_QueryList_Full_Service
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "Incident_QueryList_Full_Service",
                "ns1");

            

                        /**
                        * field for Incident_QueryList_Full_Service
                        */

                        
                                    protected InputMapping7 localIncident_QueryList_Full_Service ;
                                

                           /**
                           * Auto generated getter method
                           * @return InputMapping7
                           */
                           public  InputMapping7 getIncident_QueryList_Full_Service(){
                               return localIncident_QueryList_Full_Service;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Incident_QueryList_Full_Service
                               */
                               public void setIncident_QueryList_Full_Service(InputMapping7 param){
                            
                                            this.localIncident_QueryList_Full_Service=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localIncident_QueryList_Full_Service==null){
                                   throw new org.apache.axis2.databinding.ADBException("Incident_QueryList_Full_Service cannot be null!");
                                 }
                                 localIncident_QueryList_Full_Service.serialize(MY_QNAME,xmlWriter);
                            

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localIncident_QueryList_Full_Service.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Incident_QueryList_Full_Service parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Incident_QueryList_Full_Service object =
                new Incident_QueryList_Full_Service();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Incident_QueryList_Full_Service").equals(reader.getName())){
                                
                                                object.setIncident_QueryList_Full_Service(InputMapping7.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class InputMapping7
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = InputMapping7
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Qualification
                        */

                        
                                    protected java.lang.String localQualification ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getQualification(){
                               return localQualification;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Qualification
                               */
                               public void setQualification(java.lang.String param){
                            
                                            this.localQualification=param;
                                    

                               }
                            

                        /**
                        * field for StartRecord
                        */

                        
                                    protected java.lang.String localStartRecord ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getStartRecord(){
                               return localStartRecord;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartRecord
                               */
                               public void setStartRecord(java.lang.String param){
                            
                                            this.localStartRecord=param;
                                    

                               }
                            

                        /**
                        * field for MaxLimit
                        */

                        
                                    protected java.lang.String localMaxLimit ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMaxLimit(){
                               return localMaxLimit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MaxLimit
                               */
                               public void setMaxLimit(java.lang.String param){
                            
                                            this.localMaxLimit=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":InputMapping7",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "InputMapping7",
                           xmlWriter);
                   }

               
                   }
               
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Qualification", xmlWriter);
                             

                                          if (localQualification==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Qualification cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localQualification);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "startRecord", xmlWriter);
                             

                                          if (localStartRecord==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("startRecord cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localStartRecord);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "maxLimit", xmlWriter);
                             

                                          if (localMaxLimit==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("maxLimit cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMaxLimit);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Qualification"));
                                 
                                        if (localQualification != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQualification));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Qualification cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "startRecord"));
                                 
                                        if (localStartRecord != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartRecord));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("startRecord cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "maxLimit"));
                                 
                                        if (localMaxLimit != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxLimit));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("maxLimit cannot be null!!");
                                        }
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static InputMapping7 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            InputMapping7 object =
                new InputMapping7();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"InputMapping7".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (InputMapping7)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Qualification").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Qualification" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setQualification(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","startRecord").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"startRecord" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartRecord(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","maxLimit").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"maxLimit" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMaxLimit(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class InputMapping8
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = InputMapping8
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Incident_Number
                        */

                        
                                    protected java.lang.String localIncident_Number ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIncident_NumberTracker = false ;

                           public boolean isIncident_NumberSpecified(){
                               return localIncident_NumberTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getIncident_Number(){
                               return localIncident_Number;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Incident_Number
                               */
                               public void setIncident_Number(java.lang.String param){
                            localIncident_NumberTracker = param != null;
                                   
                                            this.localIncident_Number=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":InputMapping8",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "InputMapping8",
                           xmlWriter);
                   }

               
                   }
                if (localIncident_NumberTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Incident_Number", xmlWriter);
                             

                                          if (localIncident_Number==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Incident_Number cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localIncident_Number);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localIncident_NumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Incident_Number"));
                                 
                                        if (localIncident_Number != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIncident_Number));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Incident_Number cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static InputMapping8 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            InputMapping8 object =
                new InputMapping8();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"InputMapping8".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (InputMapping8)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Incident_Number").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Incident_Number" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIncident_Number(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class Incident_Query_Light_ServiceResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "Incident_Query_Light_ServiceResponse",
                "ns1");

            

                        /**
                        * field for Incident_Query_Light_ServiceResponse
                        */

                        
                                    protected OutputMapping11 localIncident_Query_Light_ServiceResponse ;
                                

                           /**
                           * Auto generated getter method
                           * @return OutputMapping11
                           */
                           public  OutputMapping11 getIncident_Query_Light_ServiceResponse(){
                               return localIncident_Query_Light_ServiceResponse;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Incident_Query_Light_ServiceResponse
                               */
                               public void setIncident_Query_Light_ServiceResponse(OutputMapping11 param){
                            
                                            this.localIncident_Query_Light_ServiceResponse=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localIncident_Query_Light_ServiceResponse==null){
                                   throw new org.apache.axis2.databinding.ADBException("Incident_Query_Light_ServiceResponse cannot be null!");
                                 }
                                 localIncident_Query_Light_ServiceResponse.serialize(MY_QNAME,xmlWriter);
                            

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localIncident_Query_Light_ServiceResponse.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Incident_Query_Light_ServiceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Incident_Query_Light_ServiceResponse object =
                new Incident_Query_Light_ServiceResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Incident_Query_Light_ServiceResponse").equals(reader.getName())){
                                
                                                object.setIncident_Query_Light_ServiceResponse(OutputMapping11.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class Incident_Query_Full_ServiceResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "Incident_Query_Full_ServiceResponse",
                "ns1");

            

                        /**
                        * field for Incident_Query_Full_ServiceResponse
                        */

                        
                                    protected OutputMapping8 localIncident_Query_Full_ServiceResponse ;
                                

                           /**
                           * Auto generated getter method
                           * @return OutputMapping8
                           */
                           public  OutputMapping8 getIncident_Query_Full_ServiceResponse(){
                               return localIncident_Query_Full_ServiceResponse;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Incident_Query_Full_ServiceResponse
                               */
                               public void setIncident_Query_Full_ServiceResponse(OutputMapping8 param){
                            
                                            this.localIncident_Query_Full_ServiceResponse=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localIncident_Query_Full_ServiceResponse==null){
                                   throw new org.apache.axis2.databinding.ADBException("Incident_Query_Full_ServiceResponse cannot be null!");
                                 }
                                 localIncident_Query_Full_ServiceResponse.serialize(MY_QNAME,xmlWriter);
                            

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localIncident_Query_Full_ServiceResponse.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Incident_Query_Full_ServiceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Incident_Query_Full_ServiceResponse object =
                new Incident_Query_Full_ServiceResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Incident_Query_Full_ServiceResponse").equals(reader.getName())){
                                
                                                object.setIncident_Query_Full_ServiceResponse(OutputMapping8.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class InputMapping11
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = InputMapping11
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Incident_Number
                        */

                        
                                    protected java.lang.String localIncident_Number ;
                                
                           /*  This tracker boolean wil be used to detect whether the user called the set method
                          *   for this attribute. It will be used to determine whether to include this field
                           *   in the serialized XML
                           */
                           protected boolean localIncident_NumberTracker = false ;

                           public boolean isIncident_NumberSpecified(){
                               return localIncident_NumberTracker;
                           }

                           

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getIncident_Number(){
                               return localIncident_Number;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Incident_Number
                               */
                               public void setIncident_Number(java.lang.String param){
                            localIncident_NumberTracker = param != null;
                                   
                                            this.localIncident_Number=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":InputMapping11",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "InputMapping11",
                           xmlWriter);
                   }

               
                   }
                if (localIncident_NumberTracker){
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Incident_Number", xmlWriter);
                             

                                          if (localIncident_Number==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Incident_Number cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localIncident_Number);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             }
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                 if (localIncident_NumberTracker){
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Incident_Number"));
                                 
                                        if (localIncident_Number != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localIncident_Number));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Incident_Number cannot be null!!");
                                        }
                                    }

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static InputMapping11 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            InputMapping11 object =
                new InputMapping11();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"InputMapping11".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (InputMapping11)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Incident_Number").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Incident_Number" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setIncident_Number(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                    else {
                                        
                                    }
                                  
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class VIPType
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "VIPType",
                "ns1");

            

                        /**
                        * field for VIPType
                        */

                        
                                    protected java.lang.String localVIPType ;
                                
                            private static java.util.HashMap _table_ = new java.util.HashMap();

                            // Constructor
                            
                                protected VIPType(java.lang.String value, boolean isRegisterValue) {
                                    localVIPType = value;
                                    if (isRegisterValue){
                                        
                                               _table_.put(localVIPType, this);
                                           
                                    }

                                }
                            
                                    public static final java.lang.String _Yes =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Yes");
                                
                                    public static final java.lang.String _No =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("No");
                                
                                public static final VIPType Yes =
                                    new VIPType(_Yes,true);
                            
                                public static final VIPType No =
                                    new VIPType(_No,true);
                            

                                public java.lang.String getValue() { return localVIPType;}

                                public boolean equals(java.lang.Object obj) {return (obj == this);}
                                public int hashCode() { return toString().hashCode();}
                                public java.lang.String toString() {
                                
                                        return localVIPType.toString();
                                    

                                }

                        

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String _localName = parentQName.getLocalPart();
                        
                            writeStartElement(null, namespace, _localName, xmlWriter);

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":VIPType",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "VIPType",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localVIPType==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("VIPType cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localVIPType);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();
                    

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localVIPType)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static VIPType fromValue(java.lang.String value)
                      throws java.lang.IllegalArgumentException {
                    VIPType enumeration = (VIPType)
                       
                               _table_.get(value);
                           

                    if ((enumeration == null) && !((value == null) || (value.equals("")))) {
                        throw new java.lang.IllegalArgumentException();
                    }
                    return enumeration;
                }
                public static VIPType fromString(java.lang.String value,java.lang.String namespaceURI)
                      throws java.lang.IllegalArgumentException {
                    try {
                       
                                       return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                                   

                    } catch (java.lang.Exception e) {
                        throw new java.lang.IllegalArgumentException();
                    }
                }

                public static VIPType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return VIPType.Factory.fromString(content,namespaceUri);
                    } else {
                       return VIPType.Factory.fromString(content,"");
                    }
                }
            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static VIPType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            VIPType object = null;
                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();
            

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"VIPType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                        if (content.indexOf(":") > 0) {
                                            // this seems to be a Qname so find the namespace and send
                                            prefix = content.substring(0, content.indexOf(":"));
                                            namespaceuri = reader.getNamespaceURI(prefix);
                                            object = VIPType.Factory.fromString(content,namespaceuri);
                                        } else {
                                            // this seems to be not a qname send and empty namespace incase of it is
                                            // check is done in fromString method
                                            object = VIPType.Factory.fromString(content,"");
                                        }
                                        
                                        
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class Type_Association_IncidentType
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "Type_Association_IncidentType",
                "ns1");

            

                        /**
                        * field for Type_Association_IncidentType
                        */

                        
                                    protected java.lang.String localType_Association_IncidentType ;
                                
                            private static java.util.HashMap _table_ = new java.util.HashMap();

                            // Constructor
                            
                                protected Type_Association_IncidentType(java.lang.String value, boolean isRegisterValue) {
                                    localType_Association_IncidentType = value;
                                    if (isRegisterValue){
                                        
                                               _table_.put(localType_Association_IncidentType, this);
                                           
                                    }

                                }
                            
                                    public static final java.lang.String _Original =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Original");
                                
                                    public static final java.lang.String _Duplicate =
                                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString("Duplicate");
                                
                                public static final Type_Association_IncidentType Original =
                                    new Type_Association_IncidentType(_Original,true);
                            
                                public static final Type_Association_IncidentType Duplicate =
                                    new Type_Association_IncidentType(_Duplicate,true);
                            

                                public java.lang.String getValue() { return localType_Association_IncidentType;}

                                public boolean equals(java.lang.Object obj) {return (obj == this);}
                                public int hashCode() { return toString().hashCode();}
                                public java.lang.String toString() {
                                
                                        return localType_Association_IncidentType.toString();
                                    

                                }

                        

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                            java.lang.String namespace = parentQName.getNamespaceURI();
                            java.lang.String _localName = parentQName.getLocalPart();
                        
                            writeStartElement(null, namespace, _localName, xmlWriter);

                            // add the type details if this is used in a simple type
                               if (serializeType){
                                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           namespacePrefix+":Type_Association_IncidentType",
                                           xmlWriter);
                                   } else {
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                                           "Type_Association_IncidentType",
                                           xmlWriter);
                                   }
                               }
                            
                                          if (localType_Association_IncidentType==null){
                                            
                                                     throw new org.apache.axis2.databinding.ADBException("Type_Association_IncidentType cannot be null !!");
                                                
                                         }else{
                                        
                                                       xmlWriter.writeCharacters(localType_Association_IncidentType);
                                            
                                         }
                                    
                            xmlWriter.writeEndElement();
                    

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                 return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(MY_QNAME,
                            new java.lang.Object[]{
                            org.apache.axis2.databinding.utils.reader.ADBXMLStreamReader.ELEMENT_TEXT,
                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localType_Association_IncidentType)
                            },
                            null);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        
                public static Type_Association_IncidentType fromValue(java.lang.String value)
                      throws java.lang.IllegalArgumentException {
                    Type_Association_IncidentType enumeration = (Type_Association_IncidentType)
                       
                               _table_.get(value);
                           

                    if ((enumeration == null) && !((value == null) || (value.equals("")))) {
                        throw new java.lang.IllegalArgumentException();
                    }
                    return enumeration;
                }
                public static Type_Association_IncidentType fromString(java.lang.String value,java.lang.String namespaceURI)
                      throws java.lang.IllegalArgumentException {
                    try {
                       
                                       return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(value));
                                   

                    } catch (java.lang.Exception e) {
                        throw new java.lang.IllegalArgumentException();
                    }
                }

                public static Type_Association_IncidentType fromString(javax.xml.stream.XMLStreamReader xmlStreamReader,
                                                                    java.lang.String content) {
                    if (content.indexOf(":") > -1){
                        java.lang.String prefix = content.substring(0,content.indexOf(":"));
                        java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext().getNamespaceURI(prefix);
                        return Type_Association_IncidentType.Factory.fromString(content,namespaceUri);
                    } else {
                       return Type_Association_IncidentType.Factory.fromString(content,"");
                    }
                }
            

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Type_Association_IncidentType parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Type_Association_IncidentType object = null;
                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();
            

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement()  || reader.hasText()){
                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Type_Association_IncidentType" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                        if (content.indexOf(":") > 0) {
                                            // this seems to be a Qname so find the namespace and send
                                            prefix = content.substring(0, content.indexOf(":"));
                                            namespaceuri = reader.getNamespaceURI(prefix);
                                            object = Type_Association_IncidentType.Factory.fromString(content,namespaceuri);
                                        } else {
                                            // this seems to be not a qname send and empty namespace incase of it is
                                            // check is done in fromString method
                                            object = Type_Association_IncidentType.Factory.fromString(content,"");
                                        }
                                        
                                        
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class InputMapping10
        implements org.apache.axis2.databinding.ADBBean{
        /* This type was generated from the piece of schema that had
                name = InputMapping10
                Namespace URI = urn:CUS_HPD_Interface-Query_WS
                Namespace Prefix = ns1
                */
            

                        /**
                        * field for Qualification
                        */

                        
                                    protected java.lang.String localQualification ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getQualification(){
                               return localQualification;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Qualification
                               */
                               public void setQualification(java.lang.String param){
                            
                                            this.localQualification=param;
                                    

                               }
                            

                        /**
                        * field for StartRecord
                        */

                        
                                    protected java.lang.String localStartRecord ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getStartRecord(){
                               return localStartRecord;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param StartRecord
                               */
                               public void setStartRecord(java.lang.String param){
                            
                                            this.localStartRecord=param;
                                    

                               }
                            

                        /**
                        * field for MaxLimit
                        */

                        
                                    protected java.lang.String localMaxLimit ;
                                

                           /**
                           * Auto generated getter method
                           * @return java.lang.String
                           */
                           public  java.lang.String getMaxLimit(){
                               return localMaxLimit;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param MaxLimit
                               */
                               public void setMaxLimit(java.lang.String param){
                            
                                            this.localMaxLimit=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
               return factory.createOMElement(dataSource,parentQName);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                


                java.lang.String prefix = null;
                java.lang.String namespace = null;
                

                    prefix = parentQName.getPrefix();
                    namespace = parentQName.getNamespaceURI();
                    writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);
                
                  if (serializeType){
               

                   java.lang.String namespacePrefix = registerPrefix(xmlWriter,"urn:CUS_HPD_Interface-Query_WS");
                   if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           namespacePrefix+":InputMapping10",
                           xmlWriter);
                   } else {
                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                           "InputMapping10",
                           xmlWriter);
                   }

               
                   }
               
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "Qualification", xmlWriter);
                             

                                          if (localQualification==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("Qualification cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localQualification);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "startRecord", xmlWriter);
                             

                                          if (localStartRecord==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("startRecord cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localStartRecord);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                                    namespace = "urn:CUS_HPD_Interface-Query_WS";
                                    writeStartElement(null, namespace, "maxLimit", xmlWriter);
                             

                                          if (localMaxLimit==null){
                                              // write the nil attribute
                                              
                                                     throw new org.apache.axis2.databinding.ADBException("maxLimit cannot be null!!");
                                                  
                                          }else{

                                        
                                                   xmlWriter.writeCharacters(localMaxLimit);
                                            
                                          }
                                    
                                   xmlWriter.writeEndElement();
                             
                    xmlWriter.writeEndElement();
               

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                 java.util.ArrayList elementList = new java.util.ArrayList();
                 java.util.ArrayList attribList = new java.util.ArrayList();

                
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "Qualification"));
                                 
                                        if (localQualification != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localQualification));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("Qualification cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "startRecord"));
                                 
                                        if (localStartRecord != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localStartRecord));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("startRecord cannot be null!!");
                                        }
                                    
                                      elementList.add(new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS",
                                                                      "maxLimit"));
                                 
                                        if (localMaxLimit != null){
                                            elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localMaxLimit));
                                        } else {
                                           throw new org.apache.axis2.databinding.ADBException("maxLimit cannot be null!!");
                                        }
                                    

                return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());
            
            

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static InputMapping10 parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            InputMapping10 object =
                new InputMapping10();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                
                if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
                  java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                        "type");
                  if (fullTypeName!=null){
                    java.lang.String nsPrefix = null;
                    if (fullTypeName.indexOf(":") > -1){
                        nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
                    }
                    nsPrefix = nsPrefix==null?"":nsPrefix;

                    java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);
                    
                            if (!"InputMapping10".equals(type)){
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                                return (InputMapping10)ExtensionMapper.getTypeObject(
                                     nsUri,type,reader);
                              }
                        

                  }
                

                }

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                
                    
                    reader.next();
                
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Qualification").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"Qualification" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setQualification(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","startRecord").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"startRecord" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setStartRecord(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                            
                                    
                                    while (!reader.isStartElement() && !reader.isEndElement()) reader.next();
                                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","maxLimit").equals(reader.getName())){
                                
                                    nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                    if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                        throw new org.apache.axis2.databinding.ADBException("The element: "+"maxLimit" +"  cannot be null");
                                    }
                                    

                                    java.lang.String content = reader.getElementText();
                                    
                                              object.setMaxLimit(
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));
                                              
                                        reader.next();
                                    
                              }  // End of if for expected property start element
                                
                                else{
                                    // A start element we are not expecting indicates an invalid parameter was passed
                                    throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                                }
                              
                            while (!reader.isStartElement() && !reader.isEndElement())
                                reader.next();
                            
                                if (reader.isStartElement())
                                // A start element we are not expecting indicates a trailing invalid property
                                throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                            



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class Incident_QueryList_Full_ServiceResponse
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "Incident_QueryList_Full_ServiceResponse",
                "ns1");

            

                        /**
                        * field for Incident_QueryList_Full_ServiceResponse
                        */

                        
                                    protected OutputMapping7 localIncident_QueryList_Full_ServiceResponse ;
                                

                           /**
                           * Auto generated getter method
                           * @return OutputMapping7
                           */
                           public  OutputMapping7 getIncident_QueryList_Full_ServiceResponse(){
                               return localIncident_QueryList_Full_ServiceResponse;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Incident_QueryList_Full_ServiceResponse
                               */
                               public void setIncident_QueryList_Full_ServiceResponse(OutputMapping7 param){
                            
                                            this.localIncident_QueryList_Full_ServiceResponse=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localIncident_QueryList_Full_ServiceResponse==null){
                                   throw new org.apache.axis2.databinding.ADBException("Incident_QueryList_Full_ServiceResponse cannot be null!");
                                 }
                                 localIncident_QueryList_Full_ServiceResponse.serialize(MY_QNAME,xmlWriter);
                            

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localIncident_QueryList_Full_ServiceResponse.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Incident_QueryList_Full_ServiceResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Incident_QueryList_Full_ServiceResponse object =
                new Incident_QueryList_Full_ServiceResponse();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Incident_QueryList_Full_ServiceResponse").equals(reader.getName())){
                                
                                                object.setIncident_QueryList_Full_ServiceResponse(OutputMapping7.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
        public static class Incident_Query_Light_Service
        implements org.apache.axis2.databinding.ADBBean{
        
                public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
                "urn:CUS_HPD_Interface-Query_WS",
                "Incident_Query_Light_Service",
                "ns1");

            

                        /**
                        * field for Incident_Query_Light_Service
                        */

                        
                                    protected InputMapping11 localIncident_Query_Light_Service ;
                                

                           /**
                           * Auto generated getter method
                           * @return InputMapping11
                           */
                           public  InputMapping11 getIncident_Query_Light_Service(){
                               return localIncident_Query_Light_Service;
                           }

                           
                        
                            /**
                               * Auto generated setter method
                               * @param param Incident_Query_Light_Service
                               */
                               public void setIncident_Query_Light_Service(InputMapping11 param){
                            
                                            this.localIncident_Query_Light_Service=param;
                                    

                               }
                            

     
     
        /**
        *
        * @param parentQName
        * @param factory
        * @return org.apache.axiom.om.OMElement
        */
       public org.apache.axiom.om.OMElement getOMElement (
               final javax.xml.namespace.QName parentQName,
               final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{


        
               org.apache.axiom.om.OMDataSource dataSource =
                       new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
               return factory.createOMElement(dataSource,MY_QNAME);
            
        }

         public void serialize(final javax.xml.namespace.QName parentQName,
                                       javax.xml.stream.XMLStreamWriter xmlWriter)
                                throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                           serialize(parentQName,xmlWriter,false);
         }

         public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter,
                               boolean serializeType)
            throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
            
                
                //We can safely assume an element has only one type associated with it
                
                                 if (localIncident_Query_Light_Service==null){
                                   throw new org.apache.axis2.databinding.ADBException("Incident_Query_Light_Service cannot be null!");
                                 }
                                 localIncident_Query_Light_Service.serialize(MY_QNAME,xmlWriter);
                            

        }

        private static java.lang.String generatePrefix(java.lang.String namespace) {
            if(namespace.equals("urn:CUS_HPD_Interface-Query_WS")){
                return "ns1";
            }
            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix, java.lang.String namespace, java.lang.String localPart,
                                       javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
            if (writerPrefix != null) {
                xmlWriter.writeStartElement(namespace, localPart);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }
        
        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (xmlWriter.getPrefix(namespace) == null) {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            xmlWriter.writeAttribute(namespace,attName,attValue);
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,java.lang.String attName,
                                    java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName,attValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(namespace,attName,attValue);
            }
        }


           /**
             * Util method to write an attribute without the ns prefix
             */
            private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
                                             javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

                java.lang.String attributeNamespace = qname.getNamespaceURI();
                java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
                if (attributePrefix == null) {
                    attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
                }
                java.lang.String attributeValue;
                if (attributePrefix.trim().length() > 0) {
                    attributeValue = attributePrefix + ":" + qname.getLocalPart();
                } else {
                    attributeValue = qname.getLocalPart();
                }

                if (namespace.equals("")) {
                    xmlWriter.writeAttribute(attName, attributeValue);
                } else {
                    registerPrefix(xmlWriter, namespace);
                    xmlWriter.writeAttribute(namespace, attName, attributeValue);
                }
            }
        /**
         *  method to handle Qnames
         */

        private void writeQName(javax.xml.namespace.QName qname,
                                javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();
            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
                }

            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
                                 javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }
                    namespaceURI = qnames[i].getNamespaceURI();
                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);
                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix,namespaceURI);
                        }

                        if (prefix.trim().length() > 0){
                            stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                    }
                }
                xmlWriter.writeCharacters(stringToWrite.toString());
            }

        }


        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);
            if (prefix == null) {
                prefix = generatePrefix(namespace);
                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);
                    if (uri == null || uri.length() == 0) {
                        break;
                    }
                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
            return prefix;
        }


  
        /**
        * databinding method to get an XML representation of this object
        *
        */
        public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
                    throws org.apache.axis2.databinding.ADBException{


        
                
                //We can safely assume an element has only one type associated with it
                return localIncident_Query_Light_Service.getPullParser(MY_QNAME);

        }

  

     /**
      *  Factory class that keeps the parse method
      */
    public static class Factory{

        
        

        /**
        * static method to create the object
        * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
        *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
        * Postcondition: If this object is an element, the reader is positioned at its end element
        *                If this object is a complex type, the reader is positioned at the end element of its outer element
        */
        public static Incident_Query_Light_Service parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception{
            Incident_Query_Light_Service object =
                new Incident_Query_Light_Service();

            int event;
            java.lang.String nillableValue = null;
            java.lang.String prefix ="";
            java.lang.String namespaceuri ="";
            try {
                
                while (!reader.isStartElement() && !reader.isEndElement())
                    reader.next();

                

                
                // Note all attributes that were handled. Used to differ normal attributes
                // from anyAttributes.
                java.util.Vector handledAttributes = new java.util.Vector();
                

                   
                while(!reader.isEndElement()) {
                    if (reader.isStartElement() ){
                
                                    if (reader.isStartElement() && new javax.xml.namespace.QName("urn:CUS_HPD_Interface-Query_WS","Incident_Query_Light_Service").equals(reader.getName())){
                                
                                                object.setIncident_Query_Light_Service(InputMapping11.Factory.parse(reader));
                                            
                              }  // End of if for expected property start element
                                
                             else{
                                        // A start element we are not expecting indicates an invalid parameter was passed
                                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                             }
                          
                             } else {
                                reader.next();
                             }  
                           }  // end of while loop
                        



            } catch (javax.xml.stream.XMLStreamException e) {
                throw new java.lang.Exception(e);
            }

            return object;
        }

        }//end of factory class

        

        }
           
    
            private  org.apache.axiom.om.OMElement  toOM(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_Service param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_Service.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_ServiceResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_ServiceResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_Service param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_Service.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_ServiceResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_ServiceResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_Service param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_Service.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_ServiceResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_ServiceResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_Service param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_Service.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_ServiceResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_ServiceResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_Service param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_Service.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_Service param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_Service.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_Service param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_Service.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_Service param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_Service.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             


        /**
        *  get the default envelope
        */
        private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
        return factory.getDefaultEnvelope();
        }


        private  java.lang.Object fromOM(
        org.apache.axiom.om.OMElement param,
        java.lang.Class type,
        java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

        try {
        
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_Service.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_Service.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_ServiceResponse.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Full_ServiceResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_Service.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_Service.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_ServiceResponse.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Full_ServiceResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_Service.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_Service.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_ServiceResponse.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_QueryList_Light_ServiceResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_Service.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_Service.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_ServiceResponse.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.Incident_Query_Light_ServiceResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE.class.equals(type)){
                
                           return pilotage.client.CUS_HPD_InterfaceQuery_WSServiceStub.AuthenticationInfoE.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
        } catch (java.lang.Exception e) {
        throw org.apache.axis2.AxisFault.makeFault(e);
        }
           return null;
        }



    
   }
   